{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial - Time series forecasting\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Time series are an ubiquitous type of data in all types of processes. Producing forecasts for them can be highly valuable in domains like retail or industrial manufacture, among many others.\n",
    "\n",
    "Lightwood supports time series forecasting (both univariate and multivariate inputs), handling many of the pain points commonly associated with setting up a manual time series predictive pipeline. \n",
    "\n",
    "In this tutorial, we will train a lightwood predictor and analyze its forecasts for the task of counting sunspots in monthly intervals.\n",
    "\n",
    "## Load data\n",
    "\n",
    "Let's begin by loading the dataset and looking at it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:25.167603Z",
     "iopub.status.busy": "2021-11-13T00:29:25.166984Z",
     "iopub.status.idle": "2021-11-13T00:29:25.644478Z",
     "shell.execute_reply": "2021-11-13T00:29:25.644959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Sunspots</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1749-01</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1749-02</td>\n",
       "      <td>62.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1749-03</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1749-04</td>\n",
       "      <td>55.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1749-05</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2815</th>\n",
       "      <td>1983-08</td>\n",
       "      <td>71.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2816</th>\n",
       "      <td>1983-09</td>\n",
       "      <td>50.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2817</th>\n",
       "      <td>1983-10</td>\n",
       "      <td>55.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2818</th>\n",
       "      <td>1983-11</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>1983-12</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2820 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Month  Sunspots\n",
       "0     1749-01      58.0\n",
       "1     1749-02      62.6\n",
       "2     1749-03      70.0\n",
       "3     1749-04      55.7\n",
       "4     1749-05      85.0\n",
       "...       ...       ...\n",
       "2815  1983-08      71.8\n",
       "2816  1983-09      50.3\n",
       "2817  1983-10      55.8\n",
       "2818  1983-11      33.3\n",
       "2819  1983-12      33.4\n",
       "\n",
       "[2820 rows x 2 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"https://raw.githubusercontent.com/mindsdb/benchmarks/main/benchmarks/datasets/monthly_sunspots/data.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a very simple dataset. It's got a single column that specifies the month in which the measurement was done, and then in the 'Sunspots' column we have the actual quantity we are interested in forecasting. As such, we can characterize this as a univariate time series problem.\n",
    "\n",
    "## Define the predictive task\n",
    "\n",
    "We will use Lightwood high level methods to state what we want to predict. As this is a time series task (because we want to leverage the notion of time to predict), we need to specify a set of arguments that will activate Lightwood's time series pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:25.650740Z",
     "iopub.status.busy": "2021-11-13T00:29:25.650127Z",
     "iopub.status.idle": "2021-11-13T00:29:30.891610Z",
     "shell.execute_reply": "2021-11-13T00:29:30.890254Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /home/runner/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
     ]
    }
   ],
   "source": [
    "from lightwood.api.high_level import ProblemDefinition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:30.901767Z",
     "iopub.status.busy": "2021-11-13T00:29:30.899897Z",
     "iopub.status.idle": "2021-11-13T00:29:30.904694Z",
     "shell.execute_reply": "2021-11-13T00:29:30.904233Z"
    }
   },
   "outputs": [],
   "source": [
    "tss = {'nr_predictions': 6,   # the predictor will learn to forecast what the next semester counts will look like (6 data points at monthly intervals -> 6 months)\n",
    "       'order_by': ['Month'], # what column is used to order the entire datset\n",
    "       'window': 12           # how many past values to consider for emitting predictions\n",
    "      }\n",
    "\n",
    "pdef = ProblemDefinition.from_dict({'target': 'Sunspots',         # specify the column to forecast\n",
    "                                    'timeseries_settings': tss    # pass along all time series specific parameters\n",
    "                                   })"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's do a very simple train-test split, leaving 10% of the data to check the forecasts that our predictor will produce:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:30.910080Z",
     "iopub.status.busy": "2021-11-13T00:29:30.909544Z",
     "iopub.status.idle": "2021-11-13T00:29:30.913656Z",
     "shell.execute_reply": "2021-11-13T00:29:30.913208Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2538, 2) (282, 2)\n"
     ]
    }
   ],
   "source": [
    "cutoff = int(len(df)*0.9)\n",
    "\n",
    "train = df[:cutoff]\n",
    "test = df[cutoff:]\n",
    "\n",
    "print(train.shape, test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate the predictor object\n",
    "\n",
    "Now, we can generate code for a machine learning model by using our problem definition and the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:30.919332Z",
     "iopub.status.busy": "2021-11-13T00:29:30.918316Z",
     "iopub.status.idle": "2021-11-13T00:29:31.736027Z",
     "shell.execute_reply": "2021-11-13T00:29:31.735438Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-2272:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Analyzing a sample of 2467\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:from a total population of 2820, this is equivalent to 87.5% of your data.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Infering type for: Month\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Column Month has data type date\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Infering type for: Sunspots\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Column Sunspots has data type float\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/helpers/text.py:236: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  randomness_per_index.append(S / np.log(N))\n",
      "\u001b[32mINFO:lightwood-2272:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Finished statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Unable to import black formatter, predictor code might be a bit ugly.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from lightwood.api.high_level import (\n",
    "    json_ai_from_problem,\n",
    "    code_from_json_ai,\n",
    "    predictor_from_code\n",
    ")\n",
    "\n",
    "json_ai = json_ai_from_problem(df, problem_definition=pdef)\n",
    "code = code_from_json_ai(json_ai)\n",
    "predictor = predictor_from_code(code)\n",
    "\n",
    "# uncomment this to see the generated code:\n",
    "# print(code)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train\n",
    "\n",
    "Okay, everything is ready now for our predictor to learn based on the training data we will provide.\n",
    "\n",
    "Internally, lightwood cleans and reshapes the data, featurizes measurements and timestamps, and comes up with a handful of different models that will be evaluated to keep the one that produces the best forecasts.\n",
    "\n",
    "Let's train the predictor. This should take a couple of minutes, at most:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:29:31.740738Z",
     "iopub.status.busy": "2021-11-13T00:29:31.739962Z",
     "iopub.status.idle": "2021-11-13T00:38:56.880148Z",
     "shell.execute_reply": "2021-11-13T00:38:56.880631Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-2272:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Performing statistical analysis on data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Finished statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Transforming timeseries data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Using 1 processes to reshape.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Splitting the data into train/test\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Preparing the encoders\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Encoder prepping dict length of: 1\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Done running for: Sunspots\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [1/100000] average_loss = 0.018415506234447283\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [2/100000] average_loss = 0.007314067861917721\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [3/100000] average_loss = 0.005609883556976921\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [4/100000] average_loss = 0.0048330749739361935\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [5/100000] average_loss = 0.004470130287277536\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [6/100000] average_loss = 0.004392791861450008\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [7/100000] average_loss = 0.004247126505007708\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [8/100000] average_loss = 0.0042891268041794\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [9/100000] average_loss = 0.004214218908781125\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [10/100000] average_loss = 0.004204119805339765\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [11/100000] average_loss = 0.004162483567886051\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [12/100000] average_loss = 0.0041568696158870684\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [13/100000] average_loss = 0.004140803064887803\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [14/100000] average_loss = 0.004104613525504446\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [15/100000] average_loss = 0.00409198241466072\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [16/100000] average_loss = 0.004057748687010996\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [17/100000] average_loss = 0.004041305232748958\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [18/100000] average_loss = 0.004050599503485766\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [19/100000] average_loss = 0.004070517210230173\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [20/100000] average_loss = 0.004072533672762942\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [21/100000] average_loss = 0.004025135818622049\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [22/100000] average_loss = 0.0038934281098314313\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [23/100000] average_loss = 0.0038381411141081303\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [24/100000] average_loss = 0.003929717465417853\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [25/100000] average_loss = 0.0039778590045408384\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [26/100000] average_loss = 0.0038132165387410144\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [27/100000] average_loss = 0.003979220953673948\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [28/100000] average_loss = 0.003830171797870805\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [29/100000] average_loss = 0.0038710732426545033\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [30/100000] average_loss = 0.003766286773292471\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [31/100000] average_loss = 0.0037920859729370145\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [32/100000] average_loss = 0.0037127090368735366\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [33/100000] average_loss = 0.0036698430318903535\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [34/100000] average_loss = 0.0037480704666177866\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [35/100000] average_loss = 0.003730369064043153\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [36/100000] average_loss = 0.003764706936359615\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:time series encoder epoch [37/100000] average_loss = 0.0038263771606150718\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Featurizing the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "[LightGBM] [Fatal] GPU Tree Learner was not enabled in this build.\n",
      "Please recompile with CMake option -DUSE_GPU=1\n",
      "\u001b[33mWARNING:lightwood-2272:LightGBM running on CPU, this somewhat slower than the GPU version, consider using a GPU instead\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/pytorch_ranger/ranger.py:172: UserWarning: This overload of addcmul_ is deprecated:\n",
      "\taddcmul_(Number value, Tensor tensor1, Tensor tensor2)\n",
      "Consider using one of the following signatures instead:\n",
      "\taddcmul_(Tensor tensor1, Tensor tensor2, *, Number value) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:1025.)\n",
      "  exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)\n",
      "\u001b[32mINFO:lightwood-2272:Loss of 0.6577673554420471 with learning rate 0.0001\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss of 0.757037341594696 with learning rate 0.00014\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Found learning rate of: 0.0001\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 1: 0.6906661540269852\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 2: 0.6878491342067719\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 3: 0.68440181016922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 4: 0.6803991794586182\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 5: 0.6759125143289566\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 6: 0.6709996461868286\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 7: 0.6623700559139252\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 8: 0.6564162075519562\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 9: 0.6501653790473938\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 10: 0.6436219960451126\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 11: 0.636842280626297\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 12: 0.6298393607139587\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 13: 0.6181558966636658\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 14: 0.6104386746883392\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 15: 0.6024721711874008\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 16: 0.5942974388599396\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 17: 0.5859730094671249\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 18: 0.5776587426662445\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 19: 0.5643730461597443\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 20: 0.5560251325368881\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 21: 0.5477806329727173\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 22: 0.5397049784660339\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 23: 0.5316976010799408\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 24: 0.5237874984741211\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 25: 0.5111135840415955\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 26: 0.5031179040670395\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 27: 0.49511872231960297\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 28: 0.48711858689785004\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 29: 0.4791778326034546\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 30: 0.47135505080223083\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 31: 0.4588877856731415\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 32: 0.4511416256427765\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 33: 0.44344839453697205\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 34: 0.435804083943367\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 35: 0.42823876440525055\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 36: 0.42082685977220535\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 37: 0.40919678658246994\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 38: 0.4020472839474678\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 39: 0.3949567824602127\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 40: 0.3879716694355011\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 41: 0.3810873255133629\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 42: 0.3744041919708252\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 43: 0.36404111981391907\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 44: 0.3577675372362137\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 45: 0.3516780138015747\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 46: 0.34578753262758255\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 47: 0.3401278853416443\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 48: 0.33476121723651886\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 49: 0.3266382962465286\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 50: 0.32181524485349655\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 51: 0.317240908741951\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 52: 0.3128376677632332\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 53: 0.30856484919786453\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 54: 0.30452051758766174\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 55: 0.2983928844332695\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 56: 0.2948014885187149\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 57: 0.2914077118039131\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 58: 0.28823741525411606\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 59: 0.2852123975753784\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 60: 0.2824162244796753\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 61: 0.27815527468919754\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 62: 0.27563073486089706\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 63: 0.2731883376836777\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 64: 0.2708118334412575\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 65: 0.2685142233967781\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 66: 0.2663932964205742\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 67: 0.263212226331234\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 68: 0.2612697631120682\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 69: 0.25935858488082886\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 70: 0.25749266892671585\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 71: 0.2556423470377922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 72: 0.25388655811548233\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 73: 0.2511979937553406\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 74: 0.24951031059026718\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 75: 0.24787697941064835\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 76: 0.2462785616517067\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 77: 0.24467886984348297\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 78: 0.24318785965442657\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 79: 0.24087905883789062\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 80: 0.23944181203842163\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 81: 0.23808202892541885\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 82: 0.23678850382566452\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 83: 0.23549431562423706\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 84: 0.23426061868667603\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 85: 0.23236361891031265\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 86: 0.23118624091148376\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 87: 0.23002904653549194\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 88: 0.22889728099107742\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 89: 0.22776854783296585\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 90: 0.22670594602823257\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 91: 0.22508545964956284\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 92: 0.22409232705831528\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 93: 0.2231312170624733\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 94: 0.22221766412258148\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 95: 0.22133972495794296\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 96: 0.2205197960138321\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 97: 0.21929258853197098\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 98: 0.21854285150766373\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 99: 0.2178458496928215\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 100: 0.21720465272665024\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 101: 0.21661460399627686\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 102: 0.21604866534471512\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 103: 0.21520689874887466\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 104: 0.2147197499871254\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 105: 0.2142636626958847\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 106: 0.21384135633707047\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 107: 0.21344542503356934\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 108: 0.21305302530527115\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 109: 0.21248482167720795\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 110: 0.2121746614575386\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 111: 0.21189244091510773\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 112: 0.21161121875047684\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 113: 0.21135437488555908\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 114: 0.21110358089208603\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 115: 0.21072493493556976\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 116: 0.21052584797143936\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 117: 0.2103314846754074\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 118: 0.2101643681526184\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 119: 0.2100195437669754\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 120: 0.20985102653503418\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 121: 0.2095591500401497\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 122: 0.2094147801399231\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 123: 0.20926819741725922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 124: 0.20912613719701767\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 125: 0.20898988842964172\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 126: 0.20882666110992432\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 127: 0.20854636281728745\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 128: 0.2084105834364891\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 129: 0.2082797735929489\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 130: 0.20815370976924896\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 131: 0.2080199271440506\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 132: 0.20786790549755096\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 133: 0.2075679823756218\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 134: 0.20742899179458618\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 135: 0.2072809636592865\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 136: 0.20714014768600464\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 137: 0.2070031315088272\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 138: 0.20683081448078156\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 139: 0.20652178674936295\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 140: 0.20637013763189316\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 141: 0.2062266767024994\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 142: 0.20609960705041885\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 143: 0.20597536116838455\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 144: 0.20576968044042587\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 145: 0.20544321089982986\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 146: 0.20528821647167206\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 147: 0.2051139771938324\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 148: 0.20497340708971024\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 149: 0.20482737571001053\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 150: 0.2046017050743103\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 151: 0.2042829692363739\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 152: 0.20409098267555237\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 153: 0.2039186730980873\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 154: 0.20377490669488907\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 155: 0.20363366603851318\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 156: 0.20341994613409042\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 157: 0.20309808105230331\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 158: 0.20292093604803085\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 159: 0.20275062322616577\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 160: 0.2026309296488762\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 161: 0.20245399326086044\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 162: 0.20223930478096008\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 163: 0.20194725692272186\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 164: 0.20174617320299149\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 165: 0.20161478966474533\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 166: 0.2015557363629341\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 167: 0.20136037468910217\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 168: 0.20108647644519806\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 169: 0.2007497102022171\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 170: 0.20055609196424484\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 171: 0.2003832533955574\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 172: 0.20023969560861588\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 173: 0.20006651431322098\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 174: 0.19988340884447098\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 175: 0.19955196231603622\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 176: 0.1993669867515564\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 177: 0.19925551861524582\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 178: 0.1992565244436264\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 179: 0.19894767552614212\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 180: 0.19868244975805283\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 181: 0.19839701801538467\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 182: 0.19818080216646194\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 183: 0.1980421170592308\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 184: 0.19793202728033066\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 185: 0.19774211198091507\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 186: 0.19755472987890244\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 187: 0.197224959731102\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 188: 0.19704484939575195\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 189: 0.19693704694509506\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 190: 0.19681286066770554\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 191: 0.19657181203365326\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 192: 0.19639748334884644\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 193: 0.19606488198041916\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 194: 0.19586564600467682\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 195: 0.1957632154226303\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 196: 0.1957598626613617\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 197: 0.19554409384727478\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 198: 0.19533671438694\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 199: 0.1949627324938774\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 200: 0.19477836042642593\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 201: 0.19465771317481995\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 202: 0.1946195513010025\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 203: 0.19447365403175354\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 204: 0.19418594241142273\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 205: 0.19388101994991302\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 206: 0.19365287572145462\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 207: 0.19353227317333221\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 208: 0.19343674927949905\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 209: 0.19329921156167984\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 210: 0.1930769383907318\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 211: 0.1927737221121788\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 212: 0.19259397685527802\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 213: 0.19256839156150818\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 214: 0.1925315409898758\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 215: 0.1923377737402916\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 216: 0.19203194230794907\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 217: 0.1917705312371254\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 218: 0.19147209078073502\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 219: 0.19126925617456436\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 220: 0.19117291271686554\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 221: 0.19106601923704147\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 222: 0.19085188955068588\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 223: 0.19055049121379852\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 224: 0.19036032259464264\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 225: 0.19024455547332764\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 226: 0.19025425612926483\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 227: 0.18998060375452042\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 228: 0.1897111013531685\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 229: 0.1895168423652649\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 230: 0.1892624795436859\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 231: 0.1891140267252922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 232: 0.18899989873170853\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 233: 0.18890278041362762\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 234: 0.18866212666034698\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 235: 0.18843263387680054\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 236: 0.18822363018989563\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 237: 0.18813647329807281\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 238: 0.1880512461066246\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 239: 0.1878311038017273\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 240: 0.18761201202869415\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 241: 0.18744182586669922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 242: 0.18726538866758347\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 243: 0.1871693804860115\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 244: 0.18699628859758377\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 245: 0.18690624088048935\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 246: 0.18668918311595917\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 247: 0.1865256354212761\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 248: 0.1862989440560341\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 249: 0.1862088441848755\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 250: 0.18618366867303848\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 251: 0.18591272085905075\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 252: 0.18574096262454987\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 253: 0.18557348102331161\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 254: 0.18546291440725327\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 255: 0.18537645787000656\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 256: 0.1852365806698799\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 257: 0.18511046469211578\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 258: 0.18489664793014526\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 259: 0.1847558468580246\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 260: 0.1845543161034584\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 261: 0.18444813042879105\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 262: 0.18448710441589355\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 263: 0.1841491013765335\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 264: 0.18402394652366638\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 265: 0.183861643075943\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 266: 0.18369771540164948\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 267: 0.1835455670952797\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 268: 0.18347753584384918\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 269: 0.1833430901169777\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 270: 0.18322459608316422\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 271: 0.18301136046648026\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 272: 0.18287056684494019\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 273: 0.18271945416927338\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 274: 0.18277768045663834\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 275: 0.1825171858072281\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 276: 0.1824178248643875\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 277: 0.18219983577728271\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 278: 0.1821255162358284\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 279: 0.18198125809431076\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 280: 0.18187934160232544\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 281: 0.18174219876527786\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 282: 0.18162601441144943\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 283: 0.18154454231262207\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 284: 0.18140721321105957\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 285: 0.1812911480665207\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 286: 0.1814015954732895\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 1: 0.14731487360867587\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 2: 0.1461266644976356\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 3: 0.14640462669459256\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 4: 0.15291502665389667\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 5: 0.14691886576739224\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 6: 0.1477341733195565\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 7: 0.1471941891041669\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 8: 0.1462243375453082\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 9: 0.14493380893360486\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 10: 0.1450034799900922\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 11: 0.14384442432360214\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 12: 0.1455244774168188\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM models for array prediction\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 27 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 28 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dev_data.data_frame[self.target] = dev_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 45 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 2.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 47 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dev_data.data_frame[self.target] = dev_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 25 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 26 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dev_data.data_frame[self.target] = dev_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 19 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 20 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dev_data.data_frame[self.target] = dev_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 24 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 25 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:40: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dev_data.data_frame[self.target] = dev_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting LGBM model\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:A single GBM iteration takes 0.1 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Training GBM (<module 'lightgbm' from '/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/__init__.py'>) with 882 iterations given 110.33333333333333 seconds constraint\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Lightgbm model contains 18 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 19 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting sktime forecaster for array prediction\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Ensembling the mixer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Mixer: Neural got accuracy: 0.5519557825691912\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Mixer: LightGBMArray got accuracy: 0.42732942183378736\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/pmdarima/arima/arima.py:692: UserWarning: As of version 1.5.0 'typ' is no longer a valid arg for predict. In future versions this will raise a TypeError.\n",
      "  warnings.warn(\"As of version 1.5.0 'typ' is no longer a valid \"\n",
      "\u001b[32mINFO:lightwood-2272:Mixer: SkTime got accuracy: 0.202543582497771\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Picked best mixer: Neural\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Analyzing the ensemble of mixers\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:The block ICP is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:The block AccStats is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Adjustment on validation requested.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 1: 0.14752244328459105\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 2: 0.14769836266835532\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 3: 0.14839962994058928\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 4: 0.14840721090634665\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 5: 0.14809029176831245\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Loss @ epoch 6: 0.14898723860581717\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating array of LGBM models...\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 29 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 2.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 49 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1.5 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 27 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 21 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 26 weak estimators\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/mixer/lightgbm_array.py:50: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.data_frame[self.target] = train_data.data_frame[f'{self.target}_timestep_{timestep}']\n",
      "\u001b[32mINFO:lightwood-2272:Updating lightgbm model with 1 iterations\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/lightgbm/engine.py:240: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "\u001b[32mINFO:lightwood-2272:Model now has a total of 20 weak estimators\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Started fitting sktime forecaster for array prediction\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "predictor.learn(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predict\n",
    "\n",
    "Once the predictor has trained, we can use it to generate 6-month forecasts for each of the test set data points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:38:56.884423Z",
     "iopub.status.busy": "2021-11-13T00:38:56.883326Z",
     "iopub.status.idle": "2021-11-13T00:39:04.457390Z",
     "shell.execute_reply": "2021-11-13T00:39:04.456870Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-2272:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Transforming timeseries data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:Featurizing the data\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_block(indexer, value, name)\n",
      "\u001b[32mINFO:lightwood-2272:The block ICP is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:The block AccStats is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2272:AccStats.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "forecasts = predictor.predict(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check how a single row might look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:39:04.471035Z",
     "iopub.status.busy": "2021-11-13T00:39:04.470484Z",
     "iopub.status.idle": "2021-11-13T00:39:04.473063Z",
     "shell.execute_reply": "2021-11-13T00:39:04.473501Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction</th>\n",
       "      <th>truth</th>\n",
       "      <th>order_Month</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lower</th>\n",
       "      <th>upper</th>\n",
       "      <th>anomaly</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>[72.72915575618333, 71.88690022158487, 69.4850...</td>\n",
       "      <td>51.0</td>\n",
       "      <td>[-272592000.0, -269913600.0, -267235200.0, -26...</td>\n",
       "      <td>[0.72, 0.72, 0.72, 0.72, 0.72, 0.72]</td>\n",
       "      <td>[52.71634551452513, 51.874089979926666, 49.472...</td>\n",
       "      <td>[92.74196599784153, 91.89971046324307, 89.4978...</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           prediction  truth  \\\n",
       "10  [72.72915575618333, 71.88690022158487, 69.4850...   51.0   \n",
       "\n",
       "                                          order_Month  \\\n",
       "10  [-272592000.0, -269913600.0, -267235200.0, -26...   \n",
       "\n",
       "                              confidence  \\\n",
       "10  [0.72, 0.72, 0.72, 0.72, 0.72, 0.72]   \n",
       "\n",
       "                                                lower  \\\n",
       "10  [52.71634551452513, 51.874089979926666, 49.472...   \n",
       "\n",
       "                                                upper  anomaly  \n",
       "10  [92.74196599784153, 91.89971046324307, 89.4978...     True  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecasts.iloc[[10]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You'll note that the point `prediction` has associated `lower` and `upper` bounds that are a function of the estimated `confidence` the model has on its own output. Apart from this, `order_Month` yields the timestamps of each prediction, `truth` lets us know what is the one-step-ahead observed value (if it exists at all). Finally, the `anomaly` tag will let you know if the observed value falls outside of the predicted region. \n",
    "\n",
    "\n",
    "## Visualizing a forecast\n",
    "\n",
    "Okay, time series are much easier to appreciate through plots. Let's make one:\n",
    "\n",
    "NOTE: We will use `matplotlib` to generate a simple plot of these forecasts. If you want to run this notebook locally, you will need to `pip install matplotlib` for the following code to work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:39:04.477718Z",
     "iopub.status.busy": "2021-11-13T00:39:04.477180Z",
     "iopub.status.idle": "2021-11-13T00:39:04.480946Z",
     "shell.execute_reply": "2021-11-13T00:39:04.480459Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-13T00:39:04.505805Z",
     "iopub.status.busy": "2021-11-13T00:39:04.483336Z",
     "iopub.status.idle": "2021-11-13T00:39:04.709798Z",
     "shell.execute_reply": "2021-11-13T00:39:04.709319Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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srKjvoemxPTtt99y7rnnAhwzjpUrVzJ8+HAGDx5Mamoq69evb/Ln7l//tRARERFpAW777DaW7ljq0XMO7jGYh8c/fMzXFy9ezIsvvsiCBQuw1jJixAjGjBlDly5dWLt2Lc8//zwjR47kmmuu4cknn+Tqq6/mgw8+YM2aNRhjKC4uBuDWW2/l9ttv59RTT2XLli2cffbZrF69GoBVq1bx3Xff0bZtWx566CHefvtt/vznP7N9+3a2b99OWload911F+PGjeOFF16guLiY4cOHc8YZZ/DMM8/Qrl07Vq9eTU5ODkOHDv3Re9izZ0+TYvr2228Pn+u+++47ahxPP/00t956K5deeikVFRVUV1c3+doooRYRERFpAb777jt++tOf0r59ewCmTJlCVlYWkyZNIjY2lpEjRwJw2WWX8eijj3LbbbcRGhrKtddey7nnnnt4Zverr75i1apVh8+7f/9+Dh48CMCkSZNo27YtABdeeCFnnXUWf/7zn3n77bc5//zzAfjiiy+YMWMG//rXvwBX95MtW7Ywe/bsw/XNqamppKam/ug9dO7cuUkx1XWsOE4++WTuu+8+8vPzmTJlCv369WvU512XEmoRERERDzveTLITjuxcYYwhKCiIhQsXMmvWLN59910ef/xxvv76a2pqapg/fz6hoaE/Ok9tsg4QHR1Nt27dyMnJ4a233uLpp58GXL2c33vvPRISEhocZ1NjqutYcSQmJjJixAg++eQTJk6cyDPPPMO4ceMaHGtdqqEWERERaQFGjRrFf//7X0pLSykpKeGDDz5g1KhRAGzZsoV58+YB8Prrr3Pqqady8OBB9u3bx8SJE3nooYdYtmwZAGeddRaPPfbY4fMuXbr0mGNedNFFPPDAA+zbt+/wjPPZZ5/NY489hrUWgO+//x6A0aNH8/rrrwOwYsUKcnJyfnQ+T8RU61hx5Obm0rdvX2655RYmT5581DgaSgm1iIiISAswdOhQrrrqKoYPH86IESO47rrrGDJkCAAJCQk88cQTJCYmUlRUxLRp0zhw4ADnnnsuqampnHrqqTz44IMAPProo2RnZ5OamkpSUtLhmeejOf/883nzzTe58MILD2/705/+RGVlJampqQwcOJA//elPAEybNo2DBw+SmJjI3XffzbBhw350Pk/EdKI43n77bZKTkxk8eDArVqzgiiuuqOcnfGymNmtvjtLS0qyn+xeKiIiINMbq1atJTEx0OgzxgKNdS2PMYmvtUXvyaYbaT1TXNP0OUxERERHxPSXUfmBP6R66PdCN/yz+j9OhiIiIiEgDKaH2A6sKV7GvfB+3fnYra3avcTocEREREWkAJdR+ILco9/DXl75/KRXVFQ5GIyIiIiINoYTaD+QW5WIwvHTeSyzZvoS7v7nb6ZBEREREpJ6UUPuB3OJcYjvHcsHAC/j50J/zwJwHyNyc6XRYIiIiIlIPSqj9QG5RLn3C+gDw4NkPclLXk7j8g8spPlTsbGAiIiLSol133XU/WNL7aP773/+ecB9PGTt2LLUtkSdOnEhxcXG947r77rv56quvvB3iUSmh9gObijbRt0tfADqEdOC1Ka9RcKCAGz+50eHIREREpCV77rnnSEpKOu4+TU2oq6qqGnXczJkzCQsLO+brR8b1f//3f5xxxhmNGquplFA7rLSylO0Htx9OqAGGRw/n3rH38saKN3h9+esORiciIiLNxebNmxkwYACXXnopiYmJnH/++ZSWlgIwa9YshgwZQkpKCtdccw3l5eXAD2eEO3TowB/+8AcGDRpERkYGO3fuZO7cucyYMYPf/OY3DB48mI0bN/5gzKuuuoobbriBtLQ0+vfvz8cffwzA9OnTmTRpEuPGjeP000+npKSEa665huHDhzNkyBA+/PBDAMrKyrj44otJTEzkpz/9KWVlZYfPHRcXx+7duwF4+eWXSU1NZdCgQVx++eVHjeuqq67i3XffPe77jYuL45577mHo0KGkpKSwZo1nuqsFeeQsR2GMeQE4F9hlrU2us/2XwE1ANfCJtfa37u13Ate6t99irf3cW7H5k83FmwF+kFAD3HnqnXy24TOmfTKNkbEj6R3W24HoREREpDE+u+0zdizd4dFz9hjcg/EPjz/uPmvXruX5559n5MiRXHPNNTz55JPcfPPNXHXVVcyaNYv+/ftzxRVX8NRTT3Hbbbf94NiSkhIyMjK47777+O1vf8t//vMf/vjHPzJp0iTOPfdczj///KOOuXnzZhYuXMjGjRs57bTT2LBhAwBLliwhJyeHrl27ctdddzFu3DheeOEFiouLGT58OGeccQbPPPMM7dq1Y/Xq1eTk5DB06NAfnX/lypX89a9/Ze7cuYSHh7N37166du16zLgOHTp03PcbHh7OkiVLePLJJ/nXv/7Fc889V88rcGzenKGeDvzgqhtjTgMmA4OstQOBf7m3JwEXAwPdxzxpjAn0Ymx+o7Zl3pEJdWBAIK/89BWstVz+weVaSVFEREROKDY2lpEjRwJw2WWX8d1337F27Vr69OlD//79AbjyyiuZPXv2j44NCQnh3HPPBWDYsGFs3ry5XmNeeOGFBAQE0K9fP/r27Xt41vfMM8+ka9euAHzxxRf84x//YPDgwYwdO5ZDhw6xZcsWZs+ezWWXXQZAamoqqampPzr/119/zQUXXEB4eDjA4XMey4ne75QpUxr8Hk/EazPU1trZxpi4IzZPA/5hrS1377PLvX0y8KZ7+yZjzAZgODDPW/H5i9qEuvamxLr6dOnD4xMf58r/XskDcx7gzlF3+jo8ERERaYQTzSR7izHmuM+PJzg4+PD+gYGB9a59PtaY7du3P7zNWst7771HQkJCvePxljZt2gANe48n4usa6v7AKGPMAmNMpjEm3b09GthaZ79897YWb1PRJtoFtyOyfeRRX7889XIuHHghd397N4sLFvs4OhEREWlOtmzZwrx5rvnI119/nVNPPZWEhAQ2b958uBTjlVdeYcyYMfU+Z8eOHTlw4MAxX3/nnXeoqalh48aN5ObmHjVpPvvss3nsscew1gLw/fffAzB69Ghef911v9iKFSvIycn50bHjxo3jnXfeYc+ePQDs3bv3uHE19f02hq8T6iCgK5AB/AZ42zTkv06AMeZ6Y0y2MSa7sLDQGzH6VG5xLn279D3m/yCNMTx1zlN0b9+dS9+/lNLKUh9HKCIiIs1FQkICTzzxBImJiRQVFTFt2jRCQ0N58cUXueCCC0hJSSEgIIAbbrih3ue8+OKL+ec//8mQIUN+dFMiQK9evRg+fDgTJkzg6aefJjQ09Ef7/OlPf6KyspLU1FQGDhzIn/70JwCmTZvGwYMHSUxM5O6772bYsGE/OnbgwIH84Q9/YMyYMQwaNIg77rjjuHE19f02hqn9n4JXTu4q+fi49qZEY8xnwP3W2m/czzfiSq6vA7DW/t29/XPgXmvtcUs+0tLSbO2dqc1VylMp9O3Slw8v/vC4+3296WvOePkMfjHsFzx17lM+ik5ERETqa/Xq1SQmJjo2/ubNmzn33HNZsWKFz8a86qqrjnvDYnN1tGtpjFlsrU072v6+nqH+L3AagDGmPxAC7AZmABcbY9oYY/oA/YCFPo7N56y15Bbl0jes7wn3HddnHL86+Vc8vfhpPlr7kQ+iExEREZH68GbbvDeAsUC4MSYfuAd4AXjBGLMCqACutK4p8pXGmLeBVUAVcJO1tsW3tdhVsovSylL6dPnxDYlH89dxf+XL3C+5dsa1LJ+2nO4duns5QhEREWku4uLifDo7Da5+0+LFGWpr7SXW2p7W2mBrbYy19nlrbYW19jJrbbK1dqi19us6+99nrT3JWptgrf3UW3H5k03Fm4Aft8w7ljZBbXhtymscqDjANTOuwZvlOiIiIiJSP1op0UHH6kF9PAMjB/LAGQ8wc/1MnspWLbWIiIg/0WRX89eYa6iE2kG1CXVcWFyDjrt5+M2Mjx/Pr774FasLV3shMhEREWmo0NBQ9uzZo6S6GbPWsmfPnqN2Kjker9VQy4nlFuXSs0NP2gW3a9BxxhhenPwiKU+lcOn7lzL/uvmEBIZ4KUoRERGpj5iYGPLz82kJbX1bs9DQUGJiYhp0jBJqB+UW5Tao3KOuHh168NxPnuO8t87j7m/u5h9n/MPD0YmIiEhDBAcH06dP/RoNSMuikg8HbSreVO8OH0czecBkfj705zww5wG+3fyt5wITERERkXpTQu2QiuoKtu7bWq8e1Mfz0NkPEd81nis+uILiQ8WeCU5ERERE6k0JtUPyivOw2EaXfNRqH9KeV6e8SsGBAm785EYPRSciIiIi9aWE2iGNaZl3LMOjh3Pv2Ht5Y8UbvJbzWpPPJyIiIiL1p4TaIZ5MqAHuPPVORsaO5MaZN7K5eLNHzikiIiIiJ6aE2iGbijfRJrANPTv29Mj5AgMCeeWnr2Ct5YoPrqC6psWv3C4iIiLiF5RQOyS3KJe4sDgCjOcuQZ8ufXh84uNkbcnigTkPeOy8IiIiInJsSqgd0pQe1MdzeerlXDjwQu7+9m6yC7I9fn4RERER+SEl1A6w1rKxaKNXEmpjDE+f8zQ9OvTg0vcvpaSixONjiIiIiMj/KKF2QNGhIvaX7/dKQg3QpW0XXpz8Iuv2rOO15er6ISIiIuJNSqgdsKloEwB9wry3POnpfU4nvF048/LneW0MEREREVFC7QhPt8w7GmMMGTEZLMhf4LUxREREREQJtSNqE+o+Xbw3Qw2QEZ3B6t2rtSS5iIiIiBcpoXZAblEu4e3C6dSmk1fHGREzAoCF2xZ6dRwRERGR1kwJtQNyi73TMu9I6VHpGIzKPkRERES8SAm1AzYVbfLqDYm1Ood2Jikiifnb5nt9LBEREZHWSgm1j1XVVJG3L88nM9QAI6JHsCB/AdZan4wnIiIi0tooofax/P35VNVU+SyhzojJYE/ZHjYWbfTJeCIiIiKtjRJqH/NFy7y6MmIyAJifr7IPEREREW9QQu1jvk6okyKS6BDSQQm1iIiIiJcoofaxTUWbCDSBxHSK8cl4gQGBpEelK6EWERER8RIl1D6WW5xL77DeBAUE+WzMjJgMlu1cRlllmc/GFBEREWktlFD7WG6Rb3pQ1zUiegRVNVUs2b7Ep+OKiIiItAZKqH0styiXvmE+TqjdKyaq7ENERETE85RQ+9CB8gPsLt3t8xnqHh16EBcWx4JtWjFRRERExNOUUPvQpuJNAPTp4v1VEo+UEZOhGWoRERERL1BC7UO+bplX14joEWzdv5WCAwU+H1tERESkJVNC7UNOJtS1C7wsyFfZh4iIiIgnKaH2odyiXDq36UyX0C4+H3tIjyGEBIao7ENERETEw5RQ+1BtyzxjjM/HbhPUhsE9BjN/mxJqEREREU9SQu1Dm4o3OXJDYq2M6AyyC7KpqqlyLAYRERGRlkYJtY/U2Bo2FW3yeQ/qujJiMiitLGXFrhWOxSAiIiLS0iih9pHtB7ZTXl3uyA2JtbTAi4iIiIjnKaH2ESc7fNTqE9aHiHYRWuBFRERExIOUUPuIPyTUxhgt8CIiIiLiYUqofWRT8SYMhl6dezkax4joEazZvYaisiJH4xARERFpKZRQ+0huUS4xnWJoE9TG0ThqF3hZuG2ho3GIiIiItBRKqH2ktge109Kj0zEY1VGLiIiIeIgSah/xl4S6U5tOJEUkqY5aRERExEOUUPtAWWUZ2w9u94uEGlxlHwu2LcBa63QoIiIiIs2eEmof2Fy8GXC1rfMHGTEZ7C3by4a9G5wORURERKTZU0LtA/7QMq+u2hsTVfYhIiIi0nRKqH3A3xLqxPBEOoR0UEItIiIi4gFKqH0gtyiXdsHtiGwf6XQoAAQGBDI8erg6fYiIiIh4gBJqH8gtdnX4MMY4HcphGdEZLNu5jNLKUqdDEREREWnWlFD7wKaiTX5zQ2KtETEjqKqpYsn2JU6HIiIiItKsKaH2Mmut3/SgrmtE9AgAFuSr7ENERESkKZRQe1lhaSEllSV+l1B379CdPmF9mL9NNyaKiIiINIXXEmpjzAvGmF3GmBVHee1XxhhrjAl3PzfGmEeNMRuMMTnGmKHeisvX/K3DR10jYkao04eIiIhIE3lzhno6MP7IjcaYWOAsYEudzROAfu7H9cBTXozLp/w5oc6IziB/fz7b9m9zOhQRERGRZstrCbW1djaw9ygvPQT8Fqi77vVk4GXrMh8IM8b09FZsvrSpaBMAcWFxzgZyFLULvKh9noiIiEjj+bSG2hgzGdhmrV12xEvRwNY6z/Pd2452juuNMdnGmOzCwkIvReo5uUW59OjQg3bB7ZwO5UcG9xhMSGCIyj5EREREmsBnCbUxph1wF3B3U85jrX3WWptmrU2LiIjwTHBeVNuD2h+1CWrDkB5DlFCLiIiINIEvZ6hPAvoAy4wxm4EYYIkxpgewDYits2+Me1uz548t8+rKiMkguyCbqpoqp0MRERERaZZ8llBba5dbayOttXHW2jhcZR1DrbU7gBnAFe5uHxnAPmvtdl/F5i0V1RVs3beVvmH+nVCXVZWxfOdyp0MRERERaZa82TbvDWAekGCMyTfGXHuc3WcCucAG4D/Ajd6Ky5e27NuCxdKni3+tklhX7QIvKvsQERERaZwgb53YWnvJCV6Pq/O1BW7yVixO8eeWebXiwuKIbB/Jgm0LmJY+zelwRERERJodrZToRc0hoTbGkBGToRlqERERkUZSQu1FuUW5hASGENUxyulQjmtE9AjW7llLUVmR06GIiIiINDtKqL0otyiXPmF9CDD+/THXLvCycNtChyMRERERaX78O9Nr5jYVb/LrGxJrpUelYzAq+xARERFpBCXUXpRblOvXLfNqdWzTkYGRA5m/TQm1iIiISEMpofaSorIiig8V+/UNiXVlRGewIH8BroYrIiIiIlJfSqi9pDl0+KgrIyaDokNFrN+73ulQRERERJoVJdRe0twS6hExWuBFREREpDGUUHvJpuJNAM3ipkSAxPBEOoZ0VEItIiIi0kBKqL0ktyiXbm270alNJ6dDqZfAgECGRw9nwbYFTociIiIi0qwoofaS3KLcZlPuUWtE9AiW7VhGaWWp06GIiIiINBtKqL2kOSbUGTEZVNtqFhcsdjoUERERkWZDCbUXVNdUk7cvr9kl1LU3JqrsQ0RERKT+lFB7Qf7+fKpqqugT1jxuSKwV2T6Svl366sZEERERkQZQQu0Fza1lXl0jokcooRYRERFpACXUXtCcE+qMmAy2HdhG/v58p0MRERERaRaUUHtBblEugSaQ2M6xTofSYBkxGQAsyFcdtYiIiEh9KKH2gtziXHqH9SYoIMjpUBpsUPdBhASGqOxDREREpJ6UUHvBpqJNzbLcA6BNUBuG9hyqTh8iIiIi9aSE2gtyi3KbXYePujKiM8guyKayutLpUERERET8nhJqDztQfoDC0sJmO0MNrn7UZVVlLN+13OlQRERERPyeEmoP21S8CWieHT5q6cZEERERkfpTQu1hzbllXq3enXvTvX135m/TjYkiIiIiJ6KE2sM2FTX/GWpjDCNitMCLiIiISH0oofaw3KJcOrXpRJfQLk6H0iQZ0Rms27OOvWV7nQ5FRERExK8pofaw3OJc+nbpizHG6VCapLaOeuG2hQ5HIiIiIuLflFB7WG5RbrMu96iVFpVGgAlQ2YeIiIjICSih9qAaW+Na1CWs+SfUHdt0ZGDEQCXUIiIiIieghNqDdhzcQXl1eYuYoQZX2cfCbQupsTVOhyIiIiLit5RQe1Bty7w+XZrvKol1ZcRkUHSoiPV71jsdioiIiIjfUkLtQS2hB3VdI6JHAKjsQ0REROQ4lFB7UG5RLgZD7869nQ7FIxIjEunUphMLtmnFRBEREZFjUULtQblFucR0iqFNUBunQ/GIABPA8OjhmqEWEREROQ4l1B60qXhTiyn3qDUiegQ5O3MorSx1OhSR48otyqXnv3uyYtcKp0MREZFWRgm1B+UW5baYGxJrZcRkUG2rWVyw2OlQRI5r5vqZ7Di4g9l5s50ORUREWhkl1B5SVllGwYGCFtGDui7dmCjNRW0ivapwlcORiIhIa6OE2kM2F28GWk6Hj1oR7SPo26Uv87cpoRb/Za0la0sWAKt3r3Y4GhERaW2UUHtIS2uZV1dGTIZmqMWvbSzayI6DO2gb1FYz1CIi4nNKqD1kU/EmoIUm1NEZFBwoIH9/vtOhiBxVVp5rdvqi5IvYcXAHRWVFDkckIiKtiRJqD8ktyqVdcDsi20c6HYrHjYhRHbX4t9lbZhPeLpwpA6YAKvsQERHfUkLtIblFufQJ64MxxulQPG5wj8G0CWyjhFr8VlZeFqf2OpWBkQMBWF2ohFpERHxHCbWH5BbltshyD4CQwBCG9hyqFRPFLxUcKGBj0UZG9RpF7869CQ0KVR21iIj4lBJqD7DWtuiEGlw3JmYXZFNZXel0KCI/UFs/ParXKAIDAhkQPkAlHyIi4lNKqD1gd+luSipLWnRCPSJ6BIeqDpGzM8fpUER+IGtLFu2D2zOk5xAAEsMTNUMtIiI+pYTaA2pb5vUJa1mrJNaVEZMBoLIP8TtZW7I4JfYUggKCAFdCnbcvj5KKEocjExGR1kIJtQe05B7UtXp17kWPDj10Y6L4laKyIpbvXM6oXqMOb0uKSAJgze41ToUlIiKtjBJqDzg8Q92l5c5QG2MYET1CCbX4lTlb52CxjO49+vC2xIhEQK3zRETEd5RQe0BuUS49OvSgXXA7p0PxqoyYDNbvXc+e0j1OhyICuG5IDA4IZnj08MPb4rvGExQQpDpqERHxGSXUHrCpeFOLLveoVVtHvXDbQocjEXHJ2pJFenQ6bYPbHt4WEhhCfNd4zVCLiIjPKKH2gNpFXVq6oT2HArB0x1JnAxEBSitLWVSw6Af107WSIpI0Qy0iIj6jhLqJKqor2Lp/a6uYoe7UphO9OvdiReEKp0MRYUH+Aqpqqn5QP10rMTyRjXs3Ul5V7kBkIiLS2ngtoTbGvGCM2WWMWVFn2z+NMWuMMTnGmA+MMWF1XrvTGLPBGLPWGHO2t+LytC37tlBja1pFQg2QHJnM8p3LnQ5DhKwtWRgMp8Se8qPXkiKSqLbVrN+73oHIRESktfHmDPV0YPwR274Ekq21qcA64E4AY0wScDEw0H3Mk8aYQC/G5jGtoWVeXSmRKazZvUYrJorjsrZkkdo9lbDQsB+9lhju7vRRqDpqERHxPq8l1Nba2cDeI7Z9Ya2tcj+dD8S4v54MvGmtLbfWbgI2AMNpBjYVbQJaT0KdHJlMZU0l6/asczoUacUqqyuZu3XuUeunARLCEzAY3ZgoIiI+4WQN9TXAp+6vo4GtdV7Ld2/ze7lFuYQEhhDVMcrpUHwiJTIFgBW7VEctzvl+x/eUVpYetX4aoF1wO+LC4nRjooiI+IQjCbUx5g9AFfBaI4693hiTbYzJLiws9HxwDZRbnEtcWBwBpnXc3zkgfACBJpDlu1RHLc7JyssCYFTvo89Qg6uOWjPUIiLiCz7PAo0xVwHnApdaa6178zYgts5uMe5tP2KtfdZam2atTYuIiPBqrPWRW5Tbaso9ANoEtaF/t/6aoRZHzd4ym/iu8fTo0OOY+ySGJ7J291qqa6p9GJmIiLRGPk2ojTHjgd8Ck6y1pXVemgFcbIxpY4zpA/QDmsXqIblFufQNaz0JNbg7fWiG2m8dKD/gdAheVWNr+G7Ld4zudfRyj1pJEUmUV5ezqXiTjyITEZHWyptt894A5gEJxph8Y8y1wONAR+BLY8xSY8zTANbalcDbwCrgM+Ama63fTysVlRVRfKi4Vc1Qg6uOOrcol5KKEqdDkSN8u/lbutzfhS83ful0KF6zunA1e8v2HrfcAyAxwtXpQ3XUIiLibd7s8nGJtbantTbYWhtjrX3eWhtvrY211g52P26os/991tqTrLUJ1tpPj3duf1E789WnS8tfJbGu5MhkAFYWrnQ4EqmrvKqcX3z8C6ptNe+tfs/pcLwma4u7fvoYHT5qqXWeiIj4Suu4k85LWlsP6lop3dXpwx89MOcB1u1ZR5+wPny64VP+d4tCyzI7bzY9O/Q84fdd59DORHWMYtVuzVCLiIh3KaFugtqEuk9Y65qh7hPWh7ZBbbVioh/ZsHcD92Xdx4UDL+TOU+9ky74tLbLUwVpL1pYsRvcejTHmhPsnRSRphlpERLxOCXUT5Bbl0q1tNzqHdnY6FJ8KDAhkYORAVhRqhtofWGu5aeZNhASG8NDZDzGh3wQAPt3QLCqnGiRvXx75+/NPWO5RKzE8kdW7V7fY2XoREfEPSqibYFPxplZX7lErOTJZM9R+4u2Vb/PFxi+4b9x9RHWMIqZTDCmRKcxcP9Pp0Dxudt5s4Pj9p+tKikjiYMVB8vfnezMsERFp5ZRQN0FuUW6ruyGxVkpkCjtLdlJY4vziOq3ZvkP7uO3z2xjWcxg3pt94ePvEfhP5bst37C/f72B0npeVl0VYaNjhG2NPpPbGxJZY/iIiIv5DCXUjVddUs7l4c6vrQV2rNqHRjYnO+uPXf2RXyS6eOfcZAgMCD2+fED+ByppKZuXOcjA6z8vaksWpvU6t98qkta3ztGKiiIh4kxLqRsrfn09VTVWrLflIiVSnD6dlF2TzxKInuCn9JoZFDfvBa6fEnkKnNp1aVB31rpJdrN2ztt710wAR7SLo1rabZqhFRMSrlFA3UmttmVerR4cedG3bVSsmOqS6pppffPwLenTowV9O+8uPXg8ODObMvmcyc/3MFnNDXlZe/fpP12WMITEiUTPUIiLiVUqoG6l2UZfWmlAbY0iJTNEMtUOeXPQkS7Yv4eHxDx+zy8zEfhPZdmBbi7lGWVuyaBvU9kez8SeSFJ7EqsJVLeY/FiIi4n+UUDdSblEugSaQ2M6xTofimOTIZFbsWqFExce27d/GH77+A2efdDYXJF1wzP3Gx48HaDHdPrK2ZJERk0FIYEiDjkuMSGRv2V4KS3UDrYiIeIcS6kbKLcqlV+deBAUEOR2KY1IiUzhQcYAt+7Y4HUqrcvvnt1NRXcETE5847uImUR2jGNxjcIuoo95fvp+lO5Y2qNyjVlJEEqBOHyIi4j1KqBsptyi31ZZ71Krt9KE6at/5dP2nvLPqHf44+o+c1PWkE+4/IX4C3235jn2H9vkgOu+Zu3UuNbam3v2n66ptnacVE0VExFuUUDeSEmq1zvO1ssoybpp5EwPCB/CbU35Tr2Mm9ptIta3mq9yvvBydd2XlZREUEMTJMSc3+NiYTjF0COmgGWoREfEaJdSNcLDiIIWlha0+oe4c2pnYTrGaofaR+7LuY1PxJp465ynaBLWp1zEZMRmEhYY1+zrqrC1ZDO05lPYh7Rt8rDHm8BLkIiIi3qCEuhE2Fbk6fPQJa52rJNaV0l2dPnxhdeFqHpjzAFcMuoKxcWPrfVxQQBBnnXQWn274tNnePHqo6hALti1oVP10raSIJCXUIiLiNUqoG6G196CuKzkimdWFq6msrnQ6lBbLWsu0T6bRIaQD/zzznw0+fkL8BLYf3M6yncu8EJ33Ldq2iIrqiiYl1InhiRQcKGj2teQiIuKflFA3ghLq/0npnkJlTSXr9653OpQW65WcV8jMy+T+M+4nsn1kg4+vbZ/36frm2e0ja4trQZdTe53a6HPUdvrQLLWIiHiDEupGyC3KpVObTnRt29XpUBx3uNPHTtVRe8Pesr386otfcUrsKVw79NpGnaNHhx4M7TmUmRuaZx317LzZDIwYSLd23Rp9jsQIV6cP3ZgoIiLeoIS6ETYVb6Jvl77H7QHcWgwIH0CgCVQdtZf87svfUVRWxNPnPE2Aafy368T4iczbOo+isiIPRud91TXVzN06t0nlHuC636FNYBu1zhMREa9QQt0IuUW5uiHRLTQolH7d+qnThxfM2TKH575/jjtOvoOU7ilNOteEfhOottV8mfulh6LzjWU7l3Gg4gCje49u0nkCAwJJCE9g1W7NUIuIiOcpoW6gGltzeIZaXFIi1enD0yqrK7nhkxvo1bkX94y5p8nnGxE9gq5tuza7VROz8lz1041Z0OVISRFJmqEWERGvUELdQDsO7uBQ1SEl1HUkRyaTW5RLSUWJ06G0GA/Pf5gVu1bw2ITHGtV7+UiBAYGu9nnrP6XG1nggQt+YvWU2cWFxxHSKafK5EsMT2Vy8mdLKUg9EJiIi8j9KqBuoXXA7npz4JKfFneZ0KH4jJTIFi9UNXx6SV5zHvZn3MjlhMpMSJnnsvBPiJ7CzZCdLdyz12Dm9yVpLVl5Wk+unayVFJGGxrN291iPnExERqaWEuoHCQsOYlj7tcNcAqdPpw0/qqCuqK/jDrD8wb+s8p0NplFs+uwWARyc86tHz1rbPay6rJq7bs47C0sIm10/XSgxXpw8REfEOJdTSZH279KVtUFu/qaOelTuLv333N0554RR+8dEvmlVniw/XfMiMtTP489g/06tzL4+eO7J9JGlRac2mjnp23mwAj81Q9+vWj0ATqF7UIiLicUqopckCAwJJikjymxnqzLxMggKCuGX4LTz3/XMMeGIAry9/3e+X3j5YcZBffvpLUruncuuIW70yxsT4iczPn8/esr1eOb8nZW3JIrJ9JP279ffI+UICQ4jvGq8ZahER8Tgl1OIRKd39p9NHZl4m6VHpPDLhEbJ/nk3vzr259P1LOevVs9iwd4PT4R3Tn7/9M1v3b+Xpc54mODDYK2NM6DeBGlvDFxu/8Mr5PSlri6t+2pP93hMjEjVDLSIiHqeEWjwiOSKZHQd3sLt0t6NxlFSUkF2QzZjeYwAY0nMI866dx+MTHmfhtoUkP5nMXzL/QnlVuaNxHmnZjmU8NP8hrh96PSfHnuy1cdKj0unWtpvfl31s3beVzcWbPVbuUSspPIn1e9ZTUV3h0fOKiEjrpoRaPKJ24RGnZ6nn5c+jqqaKMXFjDm8LDAjkpuE3sfqm1UweMJm7v72bQU8PInNzpoOR/k+NreGGT26ga9uu/P2Mv3t1rMCAQM6OP9vv2+dlbfFc/+m6EiMSqbbVfv2bChERaX6UUItHHO70sdPZOurMzZkEmkBGxo780WtRHaN46/y3+PTST6mormDsS2O5+sOrHZ9Vf27Jc8zPn8+/z/o3Xdt29fp4E+MnUlhayJLtS7w+VmNl5WXRMaQjg7oP8uh5kyKSAHX6EBERz1JCLR7Rs0NPurbt6vgMdWZeJkN7DqVjm47H3Gd8/HhW3LiCO0+9k1dzXmXA4wN48fsXHblpcVfJLn731e8YGzeWy1Iv88mYZ8efjcH4dfu8rC1ZjOw1ksCAQI+eN6FbAoBWTBQREY9SQi0eYYwhOTLZ0U4fZZVlLNi2oF59i9sFt+Nvp/+Npb9YyoDwAVwz4xrGvjTWp4lWja3hV1/8ipKKEp465ymP3nx3POHtwhkePdxv66j3lO5hZeFKj9dPA7QPaU9cWByrdmuGWkREPEcJtXhMSqSr04dT7ekWbFtARXXF4RsS62Ng5EBmXz2b//zkPyzfuZxBTw/ij1//kbLKMo/Ht6d0DzPXz+Tub+7m7FfPptsD3Xg151V+N/J3DAgf4PHxjmdC/AQW5C9wvNzlaL7b8h3guf7TR0oMT9QMtYiIeFSQ0wFIy5EcmcyBigNs3b/V44uS1MfsvNkYTINvZAswAVw39DomJUzi11/8mvuy7uPNFW/y5DlPctZJZzUqlorqCpbtWMaCbQuYnz+fBdsWHL4RLsAEkByZzIVJF3Jqr1O5JOWSRo3RFBP7TeTezHv5YuMX/CzlZz4f/3iytmQREhhCenS6V86fFJHE15u+prqm2uMlJSIi0jqdMKE2xowEllprS4wxlwFDgUestXlej06alZRIV6eP5TuXO5JQZ+ZlMqjHIMJCwxp1fGT7SF7+6ctcNfgqpn0yjbNfPZuLky/mobMfokeHHsc8zlrLln1bDifO8/Pns2T7EsqrXa35enboSUZMBtcNuY6MmAyGRQ2jQ0iHRsXoKcOihhHRLoKZ62f6XUI9O282I6JHEBoU6pXzJ4YnUl5dzubizZzU9SSvjCEiIq1LfWaonwIGGWMGAb8CngNeBur/e3VpFQZGDgRcrfPO6X+OT8euqK5g3tZ5XD/s+iafa1yfcSy7YRn3f3c/f/vub3y6/lP+fvrf+UXaLwgwARwoP0B2QfYPEuidJTsBCA0KZVjPYdw8/GZGRI8gIyaDmE4xPquPrq8AE8D4+PF8uuFTv5qpPVhxkCXbl/C7kb/z2hh1O30ooRYREU+oT0JdZa21xpjJwOPW2ueNMdd6OzBpfsJCw4jtFOvIjYmLti2irKqsXjck1kdoUCj3jL2HS1IuYdon07hx5o08s/gZamwNKwtXHu7h3L9bf8466SwyYjIYET2C1O6pXlvl0NMmxE/glZxXyC7IZkTMCKfDAWB+/nyqbbXH+0/XlRiRCMDq3av5ScJPvDaOiIi0HvVJqA8YY+4ELgNGG2MCgOaRMYjPJUcmO9I6LzPPtUiLpxLqWv279eery7/iteWv8cCcB4juFM2UxClkxGQwPHq4T/pGe8tZJ51FgAng0w2f+k1CnZWXRYAJ4JTYU7w2RlhoGD079NQS5CIi4jH1SagvAn4GXGut3WGM6QX807thSXOVEpnCrE2zqKyu9OlM7ey82QyMGEh4u3CPn9sYw2Wpl/msT7SvdGvXjRHRI5i5fib3jr3X6XAAmL1lNoN7DKZTm05eHScxIlGLu4iIiMfUp23e7dbaB621WQDW2i3AQO+GJc1VcmQyFdUVPl3auaqmijlb5zSoXZ64TOw3keyCbHaV7HI6FCqqK5ifP99r7fLqSgpPYnXhasdaPIqISMtSn4T6zKNsm+DpQKRlSOnu7vThwzrqJduXcLDiIGPilFA31IT4CVgsn2/43OlQWFywmENVh3ySUCdGJHKg4gDbDmzz+lgiItLyHTOhNsZMM8YsBxKMMTl1HpuAHN+FKM3JgPABBJpAn9ZRZ272Tv10azCk5xC6t+/uF6smzs6bDeDVGxJr1Xb60AIvIiLiCceboX4d+Akww/1n7WOYtbZlFZOKx4QGhdKvWz+fzlBn5mXSv1v/4/aKlqOrbZ/3+cbPqa6pdjSWrC1ZJHRLILJ9pNfHSgx3dfpQHbWIiHjCMRNqa+0+a+1ma+0lQBj/S6hjfRSbNFO+7PRRXVPNd1u+U/10E0zsN5G9ZXtZuG2hYzHU2BrmbJ3jk3IPcC3i07VtV3X6EBERjzhhDbUx5hbgNSDS/XjVGPNLbwcmzVdKZAob926kpKLE62Pl7MxhX/k+JdRNcGbfMwkwAcxcP9OxGFbsWkHxoWKflHuAq3NLYrg6fYiIiGfU56bE64AR1tq7rbV3AxnAz70bljRnyZHJWKxPZv+81X+6NenStgunxJ7iaB11bf20L69jUkSSZqhFRMQj6pNQG6BucWW1e5vIUaVEujt97PR+HXVmXiZ9wvoQ21mVSE0xIX4Ci7cvZsfBHY6Mn7Uli5hOMfTu3NtnYyaGJ7K7dDeFJYU+G1NERFqm+iTULwILjDH3GmP+DMwHnvduWNKc9e3Sl7ZBbb1eR11ja5idN1vt8jxgYr+JAI60z7PWkpWXxaheozDGd/9Xr7sEuYiISFOcMKG21j4IXA3sBXYDV1trH/ZyXNKMBQYEkhSR5PVOH6sKV7G3bK/qpz1gUPdB9OzQk5kbfF9HvbFoI9sPbvd52U5t6zzVUYuISFPVZ4a6ljniT5Fj8kWnj9r+00qom84Yw4T4CXyx8Quqaqp8OnZWXhaAzzp81IrtFEv74PbqRS0iIk1Wny4fdwMvAV2AcOBFY8wfvR2YNG8pkSlsP7idPaV7vDZGZl4msZ1iiQuL89oYrcmEfhMoPlTM/Pz5Ph03a0sWXdt2PVyC4SvGGBIjElm1WzPUIiLSNPWZob4USLfW3mutvQdXl4/LvRuWNHfJkckAXpulttaSmZfJ6N6jfVp325Kd2fdMAk0gn673bbePrC1ZnNrrVAJMQ35h5hmJ4YmaoRYRkSarz79gBUBonedtgG0nOsgY84IxZpcxZkWdbV2NMV8aY9a7/+zi3m6MMY8aYza4lzcf2tA3Iv4lpbu704eX6qjX7lnLrpJdKvfwoM6hnRnZa6RP66i3H9jOhr0bGN3LmbaHSRFJbDuwjX2H9jkyvoiItAz1Saj3ASuNMdONMS8CK4BidwL86HGOmw6MP2Lb74FZ1tp+wCz3c4AJQD/343rgqfq/BfFHPTv0pEtoF6/NUNf2LVaHD8+aGD+RpTuWUnCgwCfjZW1x10/7aEGXI9UuQb5m9xpHxhcRkZahPgn1B8BdwDfAt8AfgA+Bxe7HUVlrZ+PqDFLXZFz12Lj/PK/O9pety3wgzBjTs35vQfyRMYaU7ilem6HOzMukR4ce9Ovazyvnb60m9JsAwGcbPvPJeFl5WbQLbseQHkN8Mt6R1OlDREQ8IehEO1hraxNg3CUasdbanEaO191au9399Q6gu/vraGBrnf3y3du2I81WckQyry5/FWutR+ucrbVkblb9tDekRKYQ3TGaTzd8yjVDrvH6eLO3zOaU2FMIDgz2+lhH06dLH0ICQ9SLWkREmqQ+XT6+NcZ0MsZ0BZYA/zHGPNjUga21FrANPc4Yc70xJtsYk11YqBXO/FlK9xT2l+9n6/6tJ965AXKLctl2YJvqp72gbvu8yupKr45VfKiY5TuX+7xdXl1BAUEkdEvQDLWIiDRJfUo+Oltr9wNTcJVljADOaOR4O2tLOdx/7nJv3wbUXTs6hmPc+GitfdZam2atTYuIiGhkGOIL3ur0kZmn/tPeNLHfRPaX72de/jyvjjNnyxws1tGEGlwrJmqG2jeKyoq486s7HVviXkTEW+qTUAe5k98LgY+bON4M4Er311fiqsWu3X6Fu9tHBrCvTmmINFO1CfXynZ6to87MyyS8Xfjh+lfxrNP7nk5QQBAz13u320fWliyCA4IZETPCq+OcSFJ4EpuKNlFWWeZoHK3B09lP8485/2DSG5MorSx1OhwREY+pT0L9f8DnwAZr7SJjTF9g/YkOMsa8AcwDEowx+caYa4F/AGcaY9bjmuX+h3v3mUAusAH4D3Bjg9+J+J2w0DBiOsWwotCzM9Sz82arftqLOrXpxKheo/h0g3f7Uc/Om01aVBrtgtt5dZwTSYxIxGJZu2eto3G0dNZaXlr2ErGdYskuyOaKD66gxtY4HZaIiEecMKG21r5jrU211t7ofp5rrZ1aj+Musdb2tNYGW2tjrLXPW2v3WGtPt9b2s9aeYa3d697XWmtvstaeZK1NsdZmN/2tiT9IiUzx6Az1ln1b2Fy82bG+xa3FhPgJ5OzMIX9/vlfOX1JRQnZBtuPlHvC/Th9a4MW7FmxbwNo9a7l37L38+6x/897q97hr1l1OhyUi4hH1uSkxwhhzlzHmWfdiLS8YY17wRXDS/CVHJrN692qqaqo8cr7Mze76afWf9qqJ/SYCnm+fV15VzlOLniLxiUQqayoZH39kq3rf69e1HwEmQDcmetn0pdNpF9yOC5Iu4LaM25iWNo3759zPc0ueczo0EZEmq0/Jx4dAZ+Ar4JM6D5ETSolMoaK6gvV7TlglVC+ZeZmEhYaREpnikfPJ0SVFJBHbKdZjddRllWU8uuBR+j7alxtn3khs51g+v+xzTutzmkfO3xRtgtoQ3zVeNyZ6UVllGW+ueJOpiVPp2KYjxhgenfAo4+PHM+2TaczKneV0iCIiTXLCPtRAO2vt77weibRIdTt9JEYkNvl8mXmZjOo1isCAwCafS47NGMPEfhN5ffnrVFRXEBIY0qjzlFSU8HT20/xz7j/ZWbKTMb3H8MpPX+G0uNP8qgY+MTxRM9ReNGPtDPaV7+OqwVcd3hYUEMRb57/FyBdGMvXtqcy7dp5HfkaIiDihPjPUHxtjJno9EmmREiMSCTABHlkxseBAARv2blC7PB+ZED+BAxUHmLt1boOPPVB+gPu/u5+4R+L49Ze/JjkymW+v/JZvr/qWcX3G+VUyDa4Z+fV713u993ZrNX3ZdHp17sXYuLE/2N6pTSc+vuRjQoNCOef1c9hVsuvoJxAR8XP1SahvxZVUlxlj9htjDhhj9ns7MGkZQoNC6de1n0d6Uc/Omw3A6N66IdEXTu97OsEBwQ0q+9h3aB/3zb6PuEfi+P2s35MWlcaca+bw1RVf+XXde2J4IlU1VWzYu8HpUFqcbfu38cXGL7gi9QoCzI//yekd1puPLvmIHQd3cN6b53Go6pADUYqINE19unx0tNYGWGvbWms7uZ938kVw0jKkdE/xyAx15uZMOoZ0ZEjPIR6ISk6kQ0gHRvceXa/2eUVlRdz77b3EPRLHH7/5I6fEnsKC6xbw6aWfckrsKT6ItmkOd/pQHbXHvZrzKjW2hisHX3nMfdKj03nlp68wL38eV/33KrXTE5Fmpz5dPkYf7eGL4KRlSI5IZuPejU1eyCEzL5ORvUYSFFCf0n/xhIn9JrJi1wq27jv68vF7Svfwx6//SO+He/PnzD8zNm4si69fzEeXfMTw6OE+jrbxBoQPAFAdtYfV9p4eGTuS+K7xx913atJU7j/jft5a+Rb3fHOPjyIUEfGM+pR8/KbO40/AR8C9XoxJWpiU7ilYbJOSlV0lu1i9e7Xqp31sQvwEgB/NUu8q2cXvvvwdvR/uzd+y/sb4+PEsu2EZH1z0AUN7DnUi1CZpH9KeXp17aYbawxYVLGL17tU/uBnxeH5zym+4bsh1/DXrr7y09CXvBici4kEnnOqz1v6k7nNjTCzwsLcCkpanbqePtKi0Rp0jKy8LQAm1jw0IH0BcWBwz18/k+mHXs/3Adv419188lf0U5dXlXDTwIv4w6g8MjBzodKhNlhSRpBlqD5u+dDptg9pyQdIF9drfGMOT5zzJpuJN/PyjnxMXFufXtfciIrXqM0N9pHxAvY2k3k7qchKhQaFNWjExMy+TtkFtGRY1zIORyYkYY5gQP4Gvcr/ilk9voe+jfXlkwSNcMPACVt24itenvt4ikmlw3Zi4ZvcaqmuqnQ6lRThUdYg3VrzBlMQpdA7tXO/jggODeffCd4nvGs9P3/op6/as82KUIiKeUZ8a6seMMY+6H48DWcAS74cmLUVgQCBJEUmsKGx8p4/MvExOiT2l0f2QpfEm9ptISWUJT2U/xc+Sf8aam9fw0nkvkRCe4HRoHpUUkcShqkPk7ctzOpQW4aO1H1F8qJgrBx37ZsRjCQsN45OffUJQQBDnvH4Ou0t3eyFCERHPqc8MdTaw2P2YB/zOWnuZV6OSFiclMqXRM9R7y/ayfOdylXs4ZEL8BF6Y9ALrbl7H85OfP+HNZc1VYrjrF2+rC1VH7QnTl00nplMM4/qMa9Txfbr04cOLP2Trvq1MeWsK5VXlHo5QRMRz6tM276XaBzATOOD9sKSlSY5MZvvB7ewp3dPgY7PysrBY1VI6JDAgkKuHXE2fLn2cDsWralfpUx11020/sJ3PNnzGFalXNGlV05NjT+al814ia0sW1310HdZaD0YpIuI59Sn5+NYY08kY0xVXqcd/jDEPeT80aUlSIlMAGrXAy+y82bQJbNOs2rBJ89O1bVe6t++uTh8eUJ/e0/V1UfJF/PW0v/Jqzqv8ZfZfPBCdiIjn1afko7O1dj8wBXjZWjsCON27YUlLU7fTR0Nl5mUyImYEoUGhng5L5AfU6aPpantPnxxzMv279ffIOe8adRdXDrqSe769h9eXv+6Rc4qIeFJ9EuogY0xP4ELgYy/HIy1UVMcouoR2afCKifsO7eP7Hd+rflp8IjE8kdW7V6u0oAkWb1/MysKV9e49XR/GGJ79ybOM6T2Gqz+8mjlb5njs3CIinlCfhPr/gM+BDdbaRcaYvsB674YlLY0xhuTI5AbPUM/ZOocaW6OEWnwiKSKJ/eX7KThQ4HQozdb0pdMJDQrlwoEXevS8IYEhvH/R+/Tu3Jvz3jqPjXs3evT8IiJNUZ+bEt+x1qZaa290P8+11k71fmjS0qREprBi14oGzf5lbs4kOCCYk2NP9mJkIi61NyaqjrpxyqvKeX3565w34DzCQsM8fv6ubbvyyc8+ocbWcM7r51BUVuTxMUREGqMxC7uINEpyZDL7yveRvz+/3sfM3jKb9Oh02gW382JkIi5JEUmAOn001sfrPqboUBFXDbrKa2P069aP/170X3KLcpn69lQqqiu8NpaISH0poRafSenu6vRR3zrqkooSsguyGd1rtDfDEjmse/vuhIWGqRd1I01fNp2ojlGc0fcMr44zqvcoXpj8At9s/oYbPr5BNe8i4jgl1OIzAyNcS1TXt4567ta5VNVUqf+0+IwxxtXpY7dmqBtqx8EdfLr+0yb3nq6vy1Iv4+7Rd/Pi0he5f879Xh9PROR46tOH+o91vm7j3XCkJevStgsxnWLqPUOdmZdJoAlkZOxIL0cm8j+J4YmaoW6E13Jeo9pWe6T3dH3dO/ZeLkm+hDtn3cmHaz702bgiIkc6ZkJtjPmdMeZk4Pw6m+d5PyRpyRrS6SMzL5OhPYfSsU1HL0cl8j9JEUkUlhayu3S306E0G9Zapi+bzojoEQwIH+CzcY0xvDD5BdKi0rjiv1ewYe8Gn40tIlLX8Wao1wAXAH2NMVnGmP8A3YwxCb4JTVqilMgUVheupqqm6rj7lVWWsXDbQrXLE59LDHd3+tAsdb19v+N7Vuxa4dHe0/UVGhTKuxe8S1BAEFPfnkppZanPYxAROV5CXQzcBWwAxgKPuLf/3hgz17thSUuVHJlMeXX5CWeSFmxbQEV1BaN764ZE8a3aTh9qnVd/05dOp01gGy4aeJEj4/cO683rU15n+c7luklRRBxxvIT6bOAT4CTgQWAEUGKtvdpae4ovgpOWJyXS3elj5/HrqDM3Z2IwjOo9yhdhiRwW2zmWdsHt1DqvniqqK3h9+etMHjCZLm27OBbH2fFnc+/Ye3kl5xWezn7asThEpHU6ZkJtrb3LWns6sBl4BQgEIowx3xljPvJRfNLCDAgfQIAJOGEddWZeJoN6DPLK4hAixxNgAg4vQS4n9sm6T9hTtservafr64+j/8jEfhO59bNbWZC/wOlwRKQVqU/bvM+ttdnW2meBfGvtqcDVXo5LWqi2wW3p17XfcTt9lFeVMy9/nuqnxTGJEYmaoa6n6cum07NDT8486UynQyHABPDKT18hulM0579zPoUlhU6HJCKtRH2WHv9tnadXubfp9ndptBN1+sguyOZQ1SEl1OKYxPBE8vfns798v9Oh+LWdB3fyybpPuCz1MoICgpwOB3AtT/7ehe9RWFLIz97/GdU11U6HJCKtQIMWdrHWLvNWINJ6pESmsGHvhmPejZ+Zlwmg+mlxTO2NiWt2r3E4Ev/2+vLXXb2nB/mu93R9DO05lCfPeZKvcr/i7m/udjocEWkFtFKi+FxyZDIWe8y2ZJl5mQyMGEh4u3AfRybiotZ59fPSspdIj0pnYORAp0P5kWuGXMN1Q67jb9/9jRlrZzgdjoi0cEqoxedSurs7fRyljrqyupI5W+ao3EMcdVLXkwgOCFYd9XEs3bGUZTuXOdJ7ur4em/gYw3oO44oPtOiLiHiXEmrxuZO6nERoUOhR66iXbF9CSWUJY+KUUItzggKC6N+tvzp9HMf0pdMJCQzh4uSLnQ7lmEKDQnn3wncJDAjUoi8i4lVKqMXnAgMCSYpIOuoM9ey82QBa0EUclxSRpBnqY6ioruC15a8xKWESXdt2dTqc44oLi+O1Ka+xfOdypn0yTYu+iIhXKKEWRxyr00dmXib9u/WnR4ceDkQl8j+J4YlsKt5EWWWZ06H4nU/Xf8ru0t1+0Xu6PsbHj+eeMffw8rKXeWbxM06HIyItkBJqcURKZAoFBwrYW7b38LbqmmqytmSpflr8QlJEEjW2hnV71jkdit+Zvmw63dt35+z4s50Opd7+NOZPTIifwK2f3crCbQudDkdEWhgl1OKI5MhkgB/MUi/buYz95fuVUItfSIxwd/pQHfUPFJYU8vG6j/2q93R9BJgAXp3yKlEdozj/7fPZXarlFETEc5RQiyNSIt2dPnb+r446c7Or/7RuSBR/0L9bfwJMgOqoj/DGijeoqqnyu97T9VG76Muukl1c8t4lWvRFRDxGCbU4IqpjFGGhYT+YoZ69ZTZ9u/QlplOMg5GJuIQGhdK3S1/NUB9h+tLpDOs57HD7y+ZmaM+hPDHxCb7K/Yp7vr3H6XBEpIVQQi2OMMaQEplyuNNHja1hdt5sdfcQv6JOHz+0bMcyvt/xfbOcna7r2qHXcu2Qa7kv6z4+WvuR0+GISAughFocU9vpw1rLyl0r2Vu2V/XT4lcSwxNZv2c9ldWVTofiF15a9hLBAcFcknKJ06E02eMTH2doz6Fc/sHlbNy70elwRKSZU0ItjkmJTGFf+T7y9+eTmeeun1ZCLX4kKSKJyppKNhYp4aqsruS15a/xk4SfEN4u3Olwmiw0KJR3L3iXABOgRV9EpMmUUItj6nb6yMzLJLZTLHFhcc4GJVLHwIiBAOTszHE4Eud9tuEzdpXsaja9p+ujT5c+vDblNXJ25nDjJzdq0RcRaTQl1OKY2oQ6Z2cOs/NmMyZuDMYYh6MS+Z+U7imEBIaQXZDtdCiOm75sOhHtIhgfP97pUDxqQr8J3D3mbl5a9hLPLn7W6XBEpJlSQi2O6dK2C9Edo3lvtauN1eheuiFR/EtIYAiDug9q9QuB7Cndw0drP+Ky1MsIDgx2OhyPu3vM3YyPH88tn93Com2LnA5HRJohJdTiqJTuKSwqcP0Dpv7T4o/So9JZvH1xq+5Z/MaKN6isqeSqwVc5HYpXBJgAXv3pq/Ts0JOpb0/Voi8i0mBKqMVRyRGuso8eHXrQr2s/h6MR+bHh0cM5WHGQtXvWOh2KY6Yvnc6QHkNI7Z7qdChe061dt8OLvvzsvZ+16v9AiUjDKaEWR9UuDjGmt+qnxT+lR6cDtNpSgOU7l7N4++Jm33u6PoZFDePxiY/zZe6X3PvtvU6HIyLNiBJqcdSg7oMAGBs31tlARI4hoVsCHUI6HC5Nam1eWvYSQQFB/CzlZ06H4hPXDb2OawZfw1+z/spXuV85HY6INBNKqMVRg3oM4uNLPuaaIdc4HYrIUQUGBDKs57BWmVBX1VTxas6rnNv/XCLaRzgdjs88PvFxErolcN2M6zhQfsDpcESkGVBCLY47p/85hASGOB2GyDGlR6WzdMdSKqornA7Fpz7f8Dk7S3a2inKPutoGt+XFyS+yZd8Wfvvlb50OR0SaASXUIiInMDx6OBXVFa1ugZfpy6YT3i6cif0mOh2Kz50cezJ3nHwHTy9+mlm5s5wOR0T8nCMJtTHmdmPMSmPMCmPMG8aYUGNMH2PMAmPMBmPMW8YYTVmKiF9ojTcm7i3by4y1M7g05dJW+xukv5z2F/p368+1M65V6YeIHJfPE2pjTDRwC5BmrU0GAoGLgfuBh6y18UARcK2vYxMROZrenXsT3i68VdVRP7XoKSqqK1r1/Q1tg9vywqQX2LJvC7/76ndOhyMifsypko8goK0xJghoB2wHxgHvul9/CTjPmdBERH7IGEN6VHqrSagPVhzkofkPcU6/c1p07+n6GNlrJLdn3M5T2U/x9aavnQ5HRPyUzxNqa+024F/AFlyJ9D5gMVBsra1y75YPRB/teGPM9caYbGNMdmFhoS9CFhEhPSqdVYWrOFhx0OlQvO6pRU+xp2wPfxr9J6dD8Qt/GfcX+nXtx7Uzrm0V119EGs6Jko8uwGSgDxAFtAfG1/d4a+2z1to0a21aRETraeMkIs4aHj2cGlvDku1LnA7Fq0orS/nXvH9xZt8zGREzwulw/EK74Ha8OPlF8orz+P1Xv3c6HBHxQ06UfJwBbLLWFlprK4H3gZFAmLsEBCAG2OZAbCIiR9Vabkx8bslz7CrZpdnpI4zsNZLbMm7jiUVP8M2mb5wOR8QjrLXs3buXZcuWMXv2bHbs2IG11umwmqWgE+/icVuADGNMO6AMOB3IBr4BzgfeBK4EPnQgNhGRo4psH0mvzr1adB11eVU5D8x5gNG9RzOq9yinw/E7fx33Vz5a9xHXzriWnGk5dAjp4HRIIg1SVVVFQUEBW7duJT8/n61bt1JSUnL49W+++YaIiAhSU1NJSUmhc+fODkbbvPg8obbWLjDGvAssAaqA74FngU+AN40xf3Vve97XsYmIHE9LvzHxxaUvsu3ANqafN93pUPxSu+B2vDDpBcZMH8OdX93JYxMfczokkeM6cOAAW7duPZxAFxQUUFNTA0DXrl2Jj48nJiaG2NhYOnTowOrVq8nJyWHWrFnMmjWLuLg4UlNTSUxMJDQ01OF3499Mc57aT0tLs9nZ2U6HISKtxP3f3c/vZ/2ewt8UEt4u3OlwPKqyupJ+j/WjZ8eezL1mLsYYp0PyW7d9dhuPLHiEb678hrFxY50ORwSAmpoadu7c+YPZ5+LiYgACAwOJjo4+nDzHxsbSvn37Y55r7969LF++nJycHPbu3UtQUBAJCQmkpKQQHx9PYGCgj96VfzHGLLbWph31NSXUIiL18/Wmrzn95dP59NJPGR9f73upm4UXv3+Ra2Zcwyc/+6RVrozYEKWVpaQ+lUqNrWH5tOW0Dzl2YiLiLWVlZYcT5/z8fPLz86msrASgQ4cO9OrV63AC3bNnz0YlwdZaCgoKWLZsGStXrqS0tJS2bduSnJxMamoq0dHRreo/30qoRUQ8YN+hfXS5vwt/Hvtn/jSm5dy0V1VTReITiXRq04nsn2e3qn8gGysrL4sx08dw8/CbeXTCo06HI37o4MGDzJkzh5UrV1JTU4Mx5vADaNLz8vJy9uzZc3h79+7dD888x8bG0rlzZ49/H1dXV7Nx40ZycnJYu3YtVVVVdO3alZSUFFJTU+natatHx/NHx0uonbgpUUSkWeoc2pmE8IQWV0f91oq32LB3A+9f+L6S6Xoa1XsUvxz+Sx5d+ChTE6cyJm6M0yGJnygpKWHu3LksXLiQ6upqBgwYQLt27bDWHn4AP/jzaK8d73mnTp1ITU0lNjaW6OhoQkJCvP6+AgMD6d+/P/3796e8vPxwvXVmZiaZmZnExMSQmprKwIEDadeundfj8TeaoRYRaYArPriCL3O/pOCOghaRfNbYGpKfTCYwIJBlNywjwDi1gG7zU1JRwqCnB2Gx5NyQo9KPVq60tPRwIl1ZWUlKSgpjxoyhW7duTofmVfv37z9cb71r1y4CAgKIj48nNTWV/v37Exwc7HSIHqMZahERD0mPSueVnFfYdmAbMZ1inA6nyd5f/T6rd6/mjalvKJluoPYh7Xlhsqvrx12z7uKRCY84HZI4oKysjHnz5rFgwQIqKipITk5mzJgxhIe3rBuXj6VTp06MHDmSkSNHsnPnTnJycli+fDnr1q2jTZs2DBo0iPT09Bb/eWiGWkSkAebnz+fk50/mvQvfY0riFKfDaRJrLUOeGcKhqkOsvHElgQGt8879prrl01t4bOFjZF6Vyejeo50OR3zk0KFDhxPp8vJyBg4cyOjRo4mMjHQ6NMfV1NSwefNmvv/+e1atWkVNTQ1xcXGkp6eTkJDQbLuE6KZEEREPOVR1iI5/78ivT/41fz/j706H0yQfrf2ISW9O4qXzXuKKQVc4HU6zVVJRQurTqRgMOdNyaBfc+upHW5NDhw6xYMEC5s2bR3l5OYmJiYwZM4bu3bs7HZpfKikp4fvvvyc7O5t9+/bRoUMHhg4dyrBhw+jUqZPT4TWIEmoREQ8a9uwwuoR24asrvnI6lEaz1jLiuRHsLt3Nul+uIyhAFYBNkbk5k7EvjeXWEbfy8PiHnQ5HvKC8vPxwIn3o0CEGDBjAmDFj6NGjh9OhNQs1NTVs2LCB7Oxs1q9fjzGGAQMGkJaWRp8+fZrFPSmqoRYR8aD0qHTeXPEmNbam2dYdf7HxCxYVLOLZc59VMu0BY+LGcHP6zTy6wNX1Q0u3txwVFRUsXLiQuXPnUlZWRv/+/Rk7diw9e/Z0OrRmJSAg4HCXkKKiIrKzs/n+++9ZvXo13bp1Iy0tjUGDBtG2bVunQ20UzVCLiDTQ80ue57qPrmPtzWvp362/0+E0mLWWUS+OYsu+LWy4ZQMhgd5vudUaHKw4SOpTqYc7pqj0o3mrqKhg0aJFzJ07l9LSUvr168eYMWOIjo52OrQWo6qqilWrVrFo0SLy8/MJCgoiOTmZ9PR0oqKinA7vRzRDLSLiQenR6QAs3LawWSbUmXmZzNk6h8cnPK5k2oM6hHTghckvcNpLp/GHWX/gofEPOR2SNEJlZSXZ2dnMmTOHkpISTjrpJMaOHUtMTPPv6uNvgoKCSE1NJTU1lR07drBo0SKWL1/O0qVLiYqKIj09nYEDBzaL1nuaoRYRaaCqmio6/6Mz1w25rlm2Sjv95dNZVbiK3FtyaRvcPH+96s9unnkzTy56ktlXz+bUXqc6HY7UU2VlJYsXL2bOnDkcPHiQvn37MnbsWGJjY50OrVU5dOgQy5YtIzs7m927dxMaGsrgwYNJS0tzvKe3bkoUEfGwUS+OorqmmrnXznU6lAaZu3UuI18Yyb/P+jd3nHyH0+G0SLWlH0EBQSy9YalKP5qJJUuW8NFHH9GnTx/Gjh1Lr169nA6pVbPWkpeXx6JFi1izZg01NTWcdNJJpKWl0b9/fwICfH//ihJqEREPu+PzO3gq+yn2/34/wYH+/+vIWhNfm8iigkVsvnWzVvbzom82fcO4l8dxR8Yd/PvsfzsdjtRDVVUV27Zto3fv3k6HIkc4cOAAS5YsYfHixRw4cICbbrrJkYVijpdQN8/b00VEHJYele5aEKVwpdOh1Ft2QTafbviUX538KyXTXnZan9O4Me1GHpr/EHO2zHE6HKmHoKAgJdN+qmPHjowZM4bbbruNq666yi9XXVRCLSLSCHVvTGwu/jr7r3QJ7cKN6Tc6HUqrcP+Z99M7rDdXf3g1ZZVlTocj0uwFBAT47X96lFCLiDTCSV1OoktoFxZtW+R0KPWSszOHD9d+yK0jbqVTm+a1Ollz1SGkA89Pep71e9fzp2/+5HQ4IuJFSqhFRBrBGEN6dDqLCppHQn1f1n10DOnILSNucTqUVmVcn3FMS5vGg/MeZO7W5nUDq4jUnxJqEZFGSo9KZ8WuFZRWljodynGtLlzNOyvf4ebhN9OlbRenw2l17j/jfnp17sXVH17NoapDTocjIl6ghFpEpJHSo9KpttUs3bHU6VCO62/f/Y22wW25PeN2p0NplTq26cgTE59g3Z51zFg7w+lwRMQLlFCLiDRS7Y2J/lxHvXHvRl5f/jrT0qYR0T7C6XBarfHx44lsH8n7q993OhQR8QIl1CIijRTVMYqojlEsLPDfTh9//+7vBAcE8+tTfu10KK1aYEAg5yWcxyfrP1HZh0gLpIRaRKQJhkcP99sZ6rziPF5a9hI/H/pzenTo4XQ4rd7UpKkcrDjIlxu/dDoUEfEwJdQiIk2QHpXO+r3rKT5U7HQoP3L/nPsxGH478rdOhyLA2LixhIWG8f4alX2ItDRKqEVEmiA9ylVHnV2Q7XAkP1RwoIDnv3+eqwdfTWznWKfDESAkMISf9P8JH675kMrqSqfDEREPUkItItIEaVFpgP/dmPjPOf+kuqaa3536O6dDkTqmJk6l6FARmXmZTociIh6khFpEpAm6tO1CfNd4v7oxcVfJLp5Z/AyXpV5G3y59nQ5H6jjrpLNoF9xO3T5EWhgl1CIiTeRvNyY+OO9ByqvLuWvUXU6HIkdoG9yWif0m8sGaD6ixNU6HIyIeooRaRKSJ0qPS2XZgG9sPbHc6FPaU7uGJRU9w0cCL6N+tv9PhyFFMTZzKjoM7mLd1ntOhiIiHKKEWEWmi2hsTFxU4P0v9yIJHOFhxULPTfmxiv4mEBIbw3ur3nA5FRDxECbWISBMN6TmEQBPoeNnHvkP7eHTBo0xJnEJyZLKjscixdWrTiTP7nsn7q9/HWut0OCLiAUqoRUSaqF1wOwZGDnT8xsTHFz7OvvJ9/HHUHx2NQ05sauJU8vbl8f2O750ORUQ8QAm1iIgHDI8aTnZBtmMzjgcrDvLQ/Ic4p985DOk5xJEYpP4mJUwi0ATy3iqVfYi0BEqoRUQ8ID06nb1le8ktynVk/KcWPcWesj38afSfHBlfGqZbu26MjRurVRNFWggl1CIiHuDkjYlllWX8a96/OLPvmYyIGeHz8aVxpiROYc3uNawqXOV0KCLSREqoRUQ8IDkymdCgUEduTJy+dDq7Snbxh1F/8PnY0njnDTgPQIu8iLQASqhFRDwgODCYwT0G+3yGusbW8ND8h0iPSmd079E+HVuaJqpjFKfEnqKEWqQFUEItIuIhw6OGs3j7Yqpqqnw25ifrPmH93vXccfIdGGN8Nq54xpQBU/h+x/eO1d6LiGcooRYR8ZD06HRKK0tZXbjaZ2M+OP9BenXuxflJ5/tsTPGcKYlTAPhg9QcORyIiTaGEWkTEQ3x9Y+KS7Uv4dvO33DL8FoICgnwypnhWny59GNJjiLp9iDRzSqhFRDykX7d+dGrTyWc3Jj4470E6hnTkuqHX+WQ88Y4piVOYu3UuBQcKnA5FRBpJCbWIiIcEmADSotJ8MkOdvz+ft1a+xXVDr6NzaGevjyfeU1v28d81/3U2EBFpNCXUIiIelB6VzrKdyzhUdcir4zy+8HFqbA23jLjFq+OI9yVFJDEgfADvrdaqiSLNlRJqEREPGh49nKqaKpbtWOa1MQ5WHOSZxc8wNXEqcWFxXhtHfGfKgClkbs5kd+lup0MRkUZQQi0i4kG+uDHxxe9fpPhQMXecfIfXxhDfmpo0lWpbzUdrP3I6FBFpBCXUIiIeFNMphu7tu3stoa6uqebhBQ9zSuwpZMRkeGUM8b0hPYbQu3NvlX2INFNKqEVEPMgYQ3p0utc6fcxYO4PcolzuyNDsdEtijGFK4hS+zP2S/eX7nQ5HRBpICbWIiIelR6WzZvcaryRG/573b/qE9eG8Aed5/NzirKmJU6mormDm+plOhyIiDaSEWkTEw4ZHD8diWVyw2KPnXZC/gDlb53DriFsJDAj06LnFeSfHnkyPDj1U9iHSDCmhFhHxsLSoNMDzNyY+NP8hOrfpzDVDrvHoecU/BJgAzks4j5nrZ1JWWeZ0OCLSAEqoRUQ8LLxdOH3C+ng0oc4rzuPdVe9y/bDr6dimo8fOK/5latJUSitL+Xzj506HIiIN4EhCbYwJM8a8a4xZY4xZbYw52RjT1RjzpTFmvfvPLk7EJiLiCZ6+MfHRBY8C8Mvhv/TYOcX/jOk9hi6hXXh/9ftOhyIiDeDUDPUjwGfW2gHAIGA18HtglrW2HzDL/VxEpFlKj0onb18eu0p2Nflc+8v3858l/+HCgRcS2znWA9GJvwoODGbygMl8tO4jKqornA5HROrJ5wm1MaYzMBp4HsBaW2GtLQYmAy+5d3sJOM/XsYmIeMrw6OEAHpmlfn7J8xyoOKCFXFqJKQOmUHyomG82feN0KCJST07MUPcBCoEXjTHfG2OeM8a0B7pba7e799kBdHcgNhERjxjacygBJqDJddRVNVU8suARRvceffhmR2nZzjzpTDqEdFDZh0gz4kRCHQQMBZ6y1g4BSjiivMNaawF7tIONMdcbY7KNMdmFhYVeD1ZEpDE6hHQgMTyxyQn1+6vfJ29fnhZyaUVCg0I5p985/Hftf6muqXY6HBGpBycS6nwg31q7wP38XVwJ9k5jTE8A959HLTy01j5rrU2z1qZFRET4JGARkcaovTHRNUfQcNZa/j3v38R3jefc/ud6ODrxZ1MSp7CrZBdzts5xOhQRqQefJ9TW2h3AVmNMgnvT6cAqYAZwpXvblcCHvo5NRMST0qPSKSwtZMu+LY06fl7+PBZuW8jtGbdrIZdWZkL8BNoEtlHZh3hNTVUNO5buYNGTi3j/svd5cdSLfPeP79i3dZ/ToTVLQQ6N+0vgNWNMCJALXI0ruX/bGHMtkAdc6FBsIiIeUXtj4sJtC+kd1rvBxz8470G6hHbhykFXnnhnaVE6tunI2fFn8/7q93no7IcwxjgdkjRzh4oPkT8/n61zt7J17la2LdhGxUFXJ5kOPTrQoWcHZt05i1l3zSJuTBwpl6WQdH4SoZ1DHY68eXAkobbWLgWOdnfN6T4ORUTEa1K7pxISGMKigkVcMPCCBh2bW5TLB2s+4Hcjf0f7kPZeilD82ZQBU5ixdgbZBdmkR6c7HY40I9Za9q7fezh53jp3K4UrXfedmQBD90HdGXTlIGJPiSX2lFg69+6MMYa9G/ey/LXl5Lyaw0fXfcTMm2aSMCmB1MtSiR8fT2CIflN2LE7NUIuItHghgSEM6j6oUTcmPjL/EQJNIDcPv9kLkUlz8JOEnxAUEMT7q99XQi3HVVlaSUF2wQ8S6LI9ruXrQ8NCiTk5huSLk4k9JZbo4dGEdAg56nm6ntSVMXePYfSfRlOwqIBlryxj5ZsrWfXOKtp2a8vAiwaSelkqMRkx+q3JEUxjb5bxB2lpaTY7O9vpMEREjummT27ilZxXKP59MQGmfretFB8qJubBGKYmTeWl81468QHSYp31yllsLt7M2pvXKoFphmyNpXBVITVVNZgAA8Y1Q2yM+eHz+m5zPy8/UM62BdsOJ887vt9BTVUNAN0Suh2eeY49JZbwAeGuczRSdWU1Gz/fSM6rOaz9cC1Vh6roclIXUi9LJeXSFLr16+apj8vvGWMWW2uP2r9UM9QiIl6UHp3Ok9lPsnb3WhIjEut1zH8W/4eSyhJuz7jdy9GJv5uSOIVpn0xjZeFKkiOTnQ5H6snWWFZ/sJrMezPZtaLpq6UeS1DbIKKHR3PKb04h9pRYYjJiaBfezqNjBAYH0v/c/vQ/tz/l+8tZ9d4qlr+6nMz/yyTzz5nEZMSQclkKyRcle3zs5kQz1CIiXrSqcBUDnxzI9MnTuXLwiW8urKyupO+jfenfrT+zrpjlgwjFn+04uIOof0dxz5h7uGfsPU6HIydgrWXth2v59t5v2blsJ90SunHyHSfTLqIdtsaCdSXb1tqjPq/PPlgIDAkkKi2K7oO6ExjsTF3z/vz9LH99OTmv5LBrxS4CggKInxBP6mWp9P9Jf4LbBjsSlzdphlpExCEJ3RLoENKBRQWL6pVQv7PqHfL35/PMuc/4IDrxdz069GBkr5G8v+Z9JdR+zFrLuo/XkXlvJtuXbKdrfFd++spPSb4kmYBAJ5b88L5OMZ0Y+duRjPztSHYs20HOqzmseH0F6z5aR5tObUg8P5FBlw+i95jeraJcSQm1iIgXBQYEMqznsHrdmFi7kMuA8AGMjx/vg+ikOZgyYAp3fHEHG/ZuIL5rvNPhSB3WWjZ8uoFv7/mWguwCuvTtwuTpk0m9NJWAoJaZSB9Nj0E96DGoB2f84ww2f7OZnFdzWPX2Kpa+sJRuCd1Im5bG4CsHExrWclvwtZ6rLSLikPSodJbuWEpFdcVx98vaksWS7Uu4PeP2et/AKC3flMQpAFrkxY9Ya9nw+QaeP/l5Xj/ndUp3lzLp+UnctOYmBl85uFUl03UFBAbQ94y+nDf9PH6989ec99J5tO3Sls9v+5x/R/2bGdfNYPuS7U6H6RWt84qLiPhQenQ6FdUVLN+5/Lj7/XvevwlvF87lqZf7KDJpDnqH9WZYz2FeT6ittfx77r/p91i/Rq/u2dJZa8n9KpcXRr7Aa+Nf4+D2g5z77LncvPZmhlwzxLF6Zn8U3C6YQVcM4tp513L94utJuTSF5a8v59lhz/JcxnMsfWkplWWVTofpMUqoRUS8LD3K1UP4eGUf6/as46O1H3Fj2o20DW7rq9CkmZiSOIUF2xaQvz/fK+cvqSjhZ+//jF9/+Ws27N3AOyvf8co4zdmmbzYxffR0XjnzFfZv3c85T53DL9f/kmE/H6YFT06g59CeTPrPJH5V8CvGPzKeQ8WH+PCqD3ko5iG++M0X7N241+kQm0wJtYiIl8WFxRHeLpyF2xYec59H5j9CcGAwN6bf6MPIpLmYmjgVgA9Wf+Dxc2/cu5GTnz+Zt1a8xd9P/zup3VP5cO2HHh+nudqcuZnpY6fz8riXKcotYsLjE/jlhl+SdkOaEukGCg0LZcQtI7hp9U1cMesK+ozrw/yH5vNY/GO8Ov5V1s5YS011jdNhNopuShQR8TJjDOlR6cecod5btpcXl77IZSmX0b1Ddx9HJ81BQngCSRFJvL/mfX454pceO+9nGz7jkvcuwWD49NJPOTv+bEorS7kv6z52l+4mvF24x8ZqbrZ8t4Vv7/mWTV9vokOPDox/ZDzDrh9GUKhSp6YyxtBnXB/6jOvD/m37WfLcEpY8u4Q3J79J516dGXr9UIZeN5QO3Ts4HWq9aYZaRMQH0qPSWVW4ipKKkh+99nT205RVlXH7yVrIRY5tyoApzM6bTWFJYZPPZa3lb1l/Y+JrE+nVuRfZ12dzdvzZAExOmEyNreGTdZ80eZzmaOu8rbxy1iu8OOpFdq3YxVkPnsUtubcw4pYRSqa9oFN0J8beM5ZbN9/Khe9dSNd+Xfnmj9/wUOxDvHfJe+Rl5dEc1kxRQi0i4gPp0enU2BqWbF/yg+3lVeU8tvAxzj7pbK2EJ8c1NWkqNbamyeUYB8oPcP475/OHr//AxckXM/eaufTt0vfw60N7DiWmU0yrK/vYmbOT1ya8xgunvMCOpTs4859nckvuLZx8+8ktcpESfxMYHEjilESu+OoKblpzE+k3pbP+0/VMHz2dp1KeYtGTiyjfX+50mMekhFpExAeOdWPiWyvfYsfBHdxx8h1OhCXNyKDug+gT1qdJ3T7W7l7LiOdG8OGaD3nwrAd5bcprtA9p/4N9jDFM6j+Jzzd+TlllWVPDbjYO7jzItkXbOP0fp3Nr7q2c8utTCGkf4nRYrVJ4QjjjHxrPHdvu4CfP/YSgNkHMvGkmD0Y/yMfTPubA9gNOh/gjSqhFRHyge4fu9Orc6wc3JlpreXDegwyMGMiZfc90MDppDowxTE2cyle5X1F8qLjBx3+09iOGPzecwtJCvrz8S24/+fZjrmA3KWESpZWlfL3p6yZG3Xz0PaMvt+Xdxqm/O5WQDkqk/UFI+xCGXjuUn2f/nOsWXEfi1ERWvrnSL28GVUItIuIjR96Y+PWmr1m2cxl3nHxHq1iaV5puSuIUKmsqG1TfXGNruPfbe5n05iT6de3H4usXc1qf0457zNi4sXQM6diqyj6MMZqR9lPGGKKHR3Pe9PO4o+AO2nVr53RIP6KEWkTER9Kj0sktymVP6R4AHpz/IN3bd+fSlEsdjkyaixExI4jqGMX7a+pX9rHv0D4mvzmZP2f+masGX0XW1Vn06tzrhMe1CWrDhH4T+GjdR9TY5tnGTFomf61nV0ItIuIj6dGuOursgmxWF65m5vqZ3JR+E22C2jgcmTQXASaAnw74KZ+u//SoHWPqWlW4ivT/pPPZhs94YuITvDDphQYtGjSp/yR2HNxx3P7pIuKihFpExEeG9RwGuG5MfHj+w4QGhXJD2g0ORyXNzZTEKZRVlfH5xs+Puc97q95jxHMj2F++n2+u/IYb029scFnRxH4TCTSBzFg7o6khi7R4SqhFRHykc2hnBoQPYOb6mbyc8zJXpF5BRPsIp8OSZmZ079F0a9uN91a/96PXqmuquWvWXZz/zvkkRyaz+PrFnNrr1EaN06VtF8bEjWlVddQijaWEWkTEh9Kj0pmXP49DVYe0kIs0SlBAEJMTJvPxuo8pr/pfX969ZXs55/Vz+Pt3f+cXw37Bt1d+S3Sn6CaNNan/JFYVrmLD3g1NDVukRVNCLSLiQ7X9qM/pdw4Dwgc4HI00V1MSp7C/fP/htnbLdiwj7dk0vtn8Df/5yX94+tynPVKbP3nAZACVfYicgBJqEREfOr3v6YQGhfL7U3/vdCjSjJ3R9ww6hnTkvdXv8cbyNzj5+ZOpqK5g9lWzuW7odR4bJy4sjtTuqSr7EDkBJdQiIj6UFJHEwTsPNrquVQRcbe3O7X8uLy97mZ+9/zPSotJYfP1iRsSM8PhYkxMm892W79hdutvj5xZpKZRQi4j4WGCA/63yJc3PpSmXUllTyS+H/5JZV8yie4fuXhlnUsIkamxNgxaTEWltgpwOQERERBrunP7nsONXO7yWSNca1nMY0R2jmbFuBlcOvtKrY4k0V5qhFhERaaa8nUyDa9nnSQmT+HzD5xyqOuT18USaIyXUIiIiclyTEiZRUlnCrNxZToci4peUUIuIiMhxnRZ3Gh1DOqp9nsgxKKEWERGR42oT1Ibx8eOZsW4GNbbG6XBE/I4SahERETmhSQmT2HFwB4u2LXI6FBG/o4RaRERETmhiv4kEmkCVfYgchRJqEREROaGubbsyuvdorZoochRKqEVERKReJiVMYmXhSjbu3eh0KCJ+RQm1iIiI1MvkhMkAmqUWOYISahEREamXPl36kBKZojpqkSMooRYREZF6m5wwmawtWewp3eN0KCJ+Qwm1iIiI1NukhEnU2Bo+Wf+J06GI+A0l1CIiIlJvw6KGEdUxSmUfInUooRYREZF6CzABTOo/ic82fMahqkNOhyPiF5RQi4iISINMSphESWUJX2/62ulQRPyCEmoRERFpkHF9xtEhpAMfrlH7PBFQQi0iIiIN1CaoDePjx/PRuo+osTVOhyPiOCXUIiIi0mCT+k9i+8HtZBdkOx2KiOOUUIuIiEiDndP/HAJNoMo+RFBCLSIiIo3QtW1XRvUexYx1ap8nooRaREREGmVywmRW7FpBblGu06GIOEoJtYiIiDTKpIRJACr7kFZPCbWIiIg0St8ufUmOTObDtUqopXVTQi0iIiKNNjlhMt9t+Y49pXucDkXEMUqoRUREpNEmJUyi2lYzc/1Mp0MRcYwSahEREWm0tKg0enboqbIPadUcS6iNMYHGmO+NMR+7n/cxxiwwxmwwxrxljAlxKjYRERGpnwATwKSESXy24TMOVR1yOhwRRzg5Q30rsLrO8/uBh6y18UARcK0jUYmIiEiDTEqYREllCd9s+sbpUEQc4UhCbYyJAc4BnnM/N8A44F33Li8B5zkRm4iIiDTMuD7jaB/cXmUf0mo5NUP9MPBboMb9vBtQbK2tcj/PB6IdiEtEREQaKDQolPHx45mxdgY1tubEB4i0MD5PqI0x5wK7rLWLG3n89caYbGNMdmFhoYejExERkcaYnDCZ7Qe3s7igUf+8izRrTsxQjwQmGWM2A2/iKvV4BAgzxgS594kBth3tYGvts9baNGttWkREhC/iFRERkROY2G8igSZQZR/NkLWWiooKp8No1oJOvItnWWvvBO4EMMaMBX5trb3UGPMOcD6uJPtKQN+RIiIizUS3dt04tdepfLj2Q/467q9OhyPHUVlZSUFBAVu3bj38KCsrIy4ujtTUVBITEwkNDXU6zGbF5wn1cfwOeNMY81fge+B5h+MRERGRBpicMJk7vriD3KJc+nbp63Q44rZ///4fJM87duygpsZV696tWzcSEhLo0KEDq1atYsaMGXzyySckJCSQmppKfHw8gYGBDr8D/2estU7H0GhpaWk2Ozvb6TBEREQE2Lh3I/GPxfPQ2Q9xW8ZtTofTKlVXV7Nz5062bt1Kfn4+W7duZd++fQAEBQURHR1NbGwssbGxxMTE0K5du8PHWmspKCggJyeHFStWUFpaStu2bRk4cCCDBg0iOjoaV2O21skYs9ham3bU15RQi4iIiKckP5lMRPsIvrlSPal9oays7PDMc35+Ptu2baOyshKATp06HU6eY2Nj6d69e71nm6urq9m4cSPLly9nzZo1VFVV0aVLF1JTU0lNTaVr167efFt+6XgJtT+VfIiIiEgzNzlhMvfPuZ+9ZXvp2rb1JV11FRcXs2rVKmpqajDGHH4AP3he3221zysqKsjPzyc/P5/du3cDEBAQQI8ePRg6dOjh2efOnTs3OvbAwED69+9P//79KS8vZ/Xq1eTk5JCZmUlmZiYxMTGkpKSQnJz8g1nu1koz1CIiIuIxC/IXkPF8Bq/89BUuS73M6XAcUVxcTFZWFkuXLj1cq+xpbdu2PZw4x8bGEh0dTXBwsFfGqmv//v0sX76cnJwcdu3aRUBAAPHx8aSmptK/f3+fxOAUlXyIiIiIT9TYGmIejGFkr5G8c8E7TofjU/v27SMrK4vvv/8eYwxDhw5l5MiRtGvXjtp8y1r7g0djtgUGBhIWFuZ4PfPOnTvJyclh+fLlHDhwgDZt2pCYmMigQYPo3bu34/F5mko+RERExCcCTAA/6f8TXl/xOuVV5bQJauN0SF63f/9+vvvuO5YsWYK1lqFDh3Lqqac2qeSiOejevTtnnnkmp59+Ops3b2b58uWsWrWKpUuX0qlTJ1JSUhg2bBhdunRxOlSv0wy1iIiIeNTM9TM55/Vz+PTSTxkfP97pcLzmwIEDfPfddyxevBhrLYMHD2bUqFGEhYU5HZpjKisrWbt2LTk5OWzYsAFrLfHx8aSlpdGvXz8CApxYU9AzNEMtIiIiPjOuzzjaB7fnwzUftsiE+uDBg8yZM4fs7Gyqq6sPJ9KtYSb2RIKDg0lOTiY5OZn9+/ezZMkSlixZwptvvknnzp0ZNmwYQ4cOpX379k6H6lGaoRYRERGPm/r2VObnz2fr7VsJMM13VrKukpIS5syZw6JFi6iurmbQoEGMGjWqVbaQa4jq6mrWrl1LdnY2mzZtIiAggKSkJNLS0ujVq1ezqbXWDLWIiIj41OSEyby/+n2WbF9CWtRRc5Bmo7S0lLlz57Jw4UKqqqpISUlh9OjRdOvWzenQmoXAwECSkpJISkpi9+7dZGdns3TpUlasWEFkZCRpaWmkpqbSpk3zrbfXDLWIiIh43O7S3XT/V3fuOvUu/jLuL06H0yhlZWWHE+mKiorDiXR4eLjToTV7FRUVrFixgkWLFrFjxw5CQkJITU0lLS2N7t27Ox3eUaltnoiIiPjcmOljKCorImdajtOhNEhZWRnz5s1jwYIFVFRUMHDgQMaMGUNERITTobU41lq2bdtGdnY2K1asoLq6ml69epGWlkZSUlK9V3b0BSXUIiIi4nMPznuQX33xK3JvyaVPlz5Oh3NChw4dYv78+cyfP5/y8nKSkpIYM2YMkZGRTofWKpSWlrJ06VKys7MpKiqiffv2DBkyhGHDhvlF5xQl1CIiIuJzG/ZuoN9j/Xj47Ie5NeNWp8M5rrVr1/Lf//6XQ4cOMWDAAMaOHeu3pQctnbWWjRs3kp2dzbp16wDo168f6enpnHTSSY7dxKibEkVERMTn4rvGkxSRxIdrP/RYQm2tpcbWUG2rCQoI8lgHkfDwcHr37s2YMWPo2bOnR84pjWOMIT4+nvj4ePbt28fixYtZsmQJ69ato0uXLlx66aV+d0OoZqhFRETEa+6adRcPzHmAMXFjqK6ppqqmiqqaKqptna/rsb3ua7VWTFvBwMiBDr478ZXq6mpWr17NypUrOf/88x2prdYMtYiIiDji6sFXM3frXMqrygkKCCI0KJTAgECCAoIICggi0NT5una7CTrxPgFBRLTXTYKtRWBg4OEFY/yREmoRERHxmn7d+vHtVd86HYaIV7WMpYtERERERByihFpEREREpAmUUIuIiIiINIESahERERGRJlBCLSIiIiLSBEqoRURERESaQAm1iIiIiEgTKKEWEREREWkCJdQiIiIiIk2ghFpEREREpAmUUIuIiIiINIESahERERGRJlBCLSIiIiLSBEqoRURERESaQAm1iIiIiEgTKKEWEREREWkCJdQiIiIiIk2ghFpEREREpAmMtdbpGBrNGFMI5Dkdh58LB3Y7HYQcl66R/9M18m+6Pv5P18j/6RqdWG9rbcTRXmjWCbWcmDEm21qb5nQccmy6Rv5P18i/6fr4P10j/6dr1DQq+RARERERaQIl1CIiIiIiTaCEuuV71ukA5IR0jfyfrpF/0/Xxf7pG/k/XqAlUQy0iIiIi0gSaoRYRERERaQIl1M2YMSbWGPONMWaVMWalMebWOq/90hizxr39gTrb7zTGbDDGrDXGnO1M5K1HQ6+RMSbOGFNmjFnqfjztXPStw7GukTHmrTrXYbMxZmmdY/R95EMNvUb6PvK941yjwcaY+e7rkG2MGe7ebowxj7q/j3KMMUOdfQctXyOu0VhjzL4630d3O/sO/FuQ0wFIk1QBv7LWLjHGdAQWG2O+BLoDk4FB1tpyY0wkgDEmCbgYGAhEAV8ZY/pba6sdir81aNA1cttorR3sQKyt1VGvkbX2otodjDH/Bva5v9b3ke816Bq56fvIt471s+4B4M/W2k+NMRPdz8cCE4B+7scI4Cn3n+I9Db1GAFnW2nOdCbd50Qx1M2at3W6tXeL++gCwGogGpgH/sNaWu1/b5T5kMvCmtbbcWrsJ2AAM933krUcjrpH42HGuEeCaSQMuBN5wb9L3kY814hqJjx3nGlmgk3u3zkCB++vJwMvWZT4QZozp6eOwW5VGXCNpACXULYQxJg4YAiwA+gOjjDELjDGZxph0927RwNY6h+VT5x8l8a56XiOAPsaY793bRzkRa2t1xDWqNQrYaa1d736u7yMH1fMagb6PHHPENboN+KcxZivwL+BO9276PnJQPa8RwMnGmGXGmE+NMQN9HmgzooS6BTDGdADeA26z1u7HVcrTFcgAfgO87Z7BEYc04BptB3pZa4cAdwCvG2M6HeO04kFHuUa1LkEzn36hAddI30cOOco1mgbcbq2NBW4HnncyPmnQNVqCa6ntQcBjwH8dCLfZUELdzBljgnF9Y7xmrX3fvTkfeN/9q7SFQA0QDmwDYuscHuPeJl7UkGvkLiPYA2CtXQxsxDWbLV50jGuEMSYImAK8VWd3fR85oCHXSN9HzjjGNboSqP36Hf5XHqXvIwc05BpZa/dbaw+6v54JBBtjwn0ccrOhhLoZc89oPg+sttY+WOel/wKnuffpD4QAu4EZwMXGmDbGmD64bgZZ6NOgW5mGXiNjTIQxJtC9vS+ua5Tr06BbmeNcI4AzgDXW2vw62/R95GMNvUb6PvK941yjAmCM++txQG1ZzgzgCne3jwxgn7V2u88CboUaeo2MMT1qf7vt7vwRAOzxXcTNi7p8NG8jgcuB5eZ/Lb3uAl4AXjDGrAAqgCutawWflcaYt4FVuO72vUmdCbyuQdfIGDMa+D9jTCWuWesbrLV7HYi7NTnqNXLPyFzMEeUe1lp9H/leg64RoO8j3zvWz7qfA4+4f5NwCLje/dpMYCKum3pLgat9Gm3r1NBrdD4wzRhTBZQBF1utBnhMWilRRERERKQJVPIhIiIiItIESqhFRERERJpACbWIiIiISBMooRYRERERaQIl1CIiIiIiTaCEWkTETxljwowxN7q/jjLGvOvFsQYbYyZ66/wiIi2ZEmoREf8VBtwIYK0tsNae78WxBuPqCywiIg2kPtQiIn7KGPMmMBlYi2v1skRrbbIx5irgPKA9rlUA/4Vrtc3LgXJgorV2rzHmJOAJIALX4hk/t9auMcZcANwDVAP7cK02uAFoi2v5578DHwOPAclAMHCvtfZD99g/BToD0cCr1to/e/eTEBHxb1opUUTEf/0eSLbWDjbGxOFKcmslA0OAUFzJ8O+stUOMMQ8BVwAPA8/iWiVwvTFmBPAkrqWF7wbOttZuM8aEWWsrjDF3A2nW2psBjDF/A7621l5jjAkDFhpjvnKPPdw9fimwyBjzibU224ufg4iIX1NCLSLSPH1jrT0AHDDG7AM+cm9fDqQaYzoApwDvGGNqj2nj/nMOMN29hPr7xzj/WcAkY8yv3c9DgV7ur7+01u4BMMa8D5wKKKEWkVZLCbWISPNUXufrmjrPa3D9bA8Aiq21g4880Fp7g3vG+hxgsTFm2FHOb4Cp1tq1P9joOu7IWkHVDopIq6abEkVE/NcBoGNjDrTW7gc2ueulMS6D3F+fZK1dYK29GygEYo8y1ufAL417etsYM6TOa2caY7oaY9riquWe05gYRURaCiXUIiJ+yl1WMccYswL4ZyNOcSlwrTFmGbAS1w2OAP80xix3n3cusAz4Bkgyxiw1xlwE/AXXzYg5xpiV7ue1FgLvATnAe6qfFpHWTl0+RESk3txdPg7fvCgiIpqhFhERERFpEs1Qi4iIiIg0gWaoRURERESaQAm1iIiIiEgTKKEWEREREWkCJdQiIiIi8v/t1rEAAAAAwCB/60HsLYoYhBoAAAahBgCAIanqR39VXXCcAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 8))\n",
    "plt.plot(forecasts['truth'].iloc[-24:], color='green', label='observed series')\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['prediction'], color='purple', label='point prediction')\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['lower'], color='grey')\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['upper'], color='grey')\n",
    "plt.xlabel('timestep')\n",
    "plt.ylabel('# sunspots')\n",
    "plt.title(\"Forecasted amount of sunspots for the next semester\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "In this tutorial, we have gone through how you can train a machine learning model with Lightwood to produce forecasts for a univariate time series task.\n",
    "\n",
    "There are additional parameters to further customize your timeseries settings and/or prediction insights, so be sure to check the rest of the documentation."
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
