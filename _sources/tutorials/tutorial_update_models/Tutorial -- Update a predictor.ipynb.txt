{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "In this tutorial, we will go through an example to update a preexisting model. This might be useful when you come across additional data that you would want to consider, without having to train a model from scratch.\n",
    "\n",
    "The main abstraction that Lightwood offers for this is the `BaseMixer.partial_fit()` method. To call it, you need to pass new training data and a held-out dev subset for internal mixer usage (e.g. early stopping). If you are using an aggregate ensemble, it's likely you will want to do this for every single mixer. The convienient `PredictorInterface.adjust()` does this automatically for you.\n",
    "\n",
    "\n",
    "# Initial model training\n",
    "\n",
    "First, let's train a Lightwood predictor for the `concrete strength` dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:34:58.743585Z",
     "iopub.status.busy": "2021-11-12T04:34:58.742742Z",
     "iopub.status.idle": "2021-11-12T04:35:01.346295Z",
     "shell.execute_reply": "2021-11-12T04:35:01.346811Z"
    }
   },
   "outputs": [],
   "source": [
    "from lightwood.api.high_level import ProblemDefinition, json_ai_from_problem, predictor_from_json_ai\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:01.355303Z",
     "iopub.status.busy": "2021-11-12T04:35:01.354646Z",
     "iopub.status.idle": "2021-11-12T04:35:01.544850Z",
     "shell.execute_reply": "2021-11-12T04:35:01.545433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train dataframe shape: (206, 10)\n",
      "Update dataframe shape: (618, 10)\n",
      "Test dataframe shape: (206, 10)\n"
     ]
    }
   ],
   "source": [
    "# Load data\n",
    "df = pd.read_csv('https://raw.githubusercontent.com/mindsdb/lightwood/staging/tests/data/concrete_strength.csv')\n",
    "\n",
    "df = df.sample(frac=1, random_state=1)\n",
    "train_df = df[:int(0.2*len(df))]\n",
    "update_df = df[int(0.2*len(df)):int(0.8*len(df))]\n",
    "test_df = df[int(0.8*len(df)):]\n",
    "\n",
    "print(f'Train dataframe shape: {train_df.shape}')\n",
    "print(f'Update dataframe shape: {update_df.shape}')\n",
    "print(f'Test dataframe shape: {test_df.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we have three different data splits.\n",
    "\n",
    "We will use the `training` split for the initial model training. As you can see, it's only a 20% of the total data we have. The `update` split will be used as training data to adjust/update our model. Finally, the held out `test` set will give us a rough idea of the impact our updating procedure has on the model's predictive capabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:01.553797Z",
     "iopub.status.busy": "2021-11-12T04:35:01.552534Z",
     "iopub.status.idle": "2021-11-12T04:35:05.004864Z",
     "shell.execute_reply": "2021-11-12T04:35:05.005650Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-3713:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Analyzing a sample of 979\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:from a total population of 1030, this is equivalent to 95.0% of your data.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: id\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column id has data type integer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: cement\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column cement has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: slag\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column slag has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: flyAsh\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column flyAsh has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: water\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column water has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: superPlasticizer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column superPlasticizer has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: coarseAggregate\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column coarseAggregate has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: fineAggregate\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column fineAggregate has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: age\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column age has data type integer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Infering type for: concrete_strength\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Column concrete_strength has data type float\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Finished statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Unable to import black formatter, predictor code might be a bit ugly.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Performing statistical analysis on data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Finished statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Splitting the data into train/test\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Preparing the encoders\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 1\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 2\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 3\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 4\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 5\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 6\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 7\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 8\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 9\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Encoder prepping dict length of: 10\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: concrete_strength\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: id\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: cement\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: slag\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: flyAsh\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: water\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: superPlasticizer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: coarseAggregate\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: fineAggregate\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Done running for: age\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Featurizing the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Training the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/pytorch_ranger/ranger.py:172: UserWarning: This overload of addcmul_ is deprecated:\n",
      "\taddcmul_(Number value, Tensor tensor1, Tensor tensor2)\n",
      "Consider using one of the following signatures instead:\n",
      "\taddcmul_(Tensor tensor1, Tensor tensor2, *, Number value) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:1025.)\n",
      "  exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 7.6965460777282715 with learning rate 0.0001\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 6.121406078338623 with learning rate 0.00014\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 5.7169036865234375 with learning rate 0.00019599999999999997\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 4.907417297363281 with learning rate 0.00027439999999999995\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 3.7602124214172363 with learning rate 0.0003841599999999999\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 1.8155415058135986 with learning rate 0.0005378239999999999\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 3.7833187580108643 with learning rate 0.0007529535999999998\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss of 8.216030359268188 with learning rate 0.0010541350399999995\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Found learning rate of: 0.0005378239999999999\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 1: 0.730228841304779\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 2: 0.9203720688819885\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 3: 0.8405622243881226\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 4: 0.7608697414398193\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 5: 0.682328462600708\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 6: 0.6068086624145508\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 7: 0.4470987617969513\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 8: 0.3933545649051666\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 9: 0.3497759699821472\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 10: 0.3151411712169647\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 11: 0.2879961431026459\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 12: 0.2667108178138733\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 13: 0.233540341258049\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 14: 0.21926471590995789\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 15: 0.2049691081047058\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 16: 0.190594881772995\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 17: 0.17612513899803162\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 18: 0.1613832265138626\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 19: 0.12839828431606293\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 20: 0.11621234565973282\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 21: 0.10669219493865967\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 22: 0.09954901784658432\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 23: 0.09420690685510635\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 24: 0.0900392010807991\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 25: 0.08349905908107758\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 26: 0.08220996707677841\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 27: 0.08120816200971603\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 28: 0.0804857537150383\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 29: 0.07996372878551483\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 30: 0.07936402410268784\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 31: 0.07869084924459457\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 32: 0.0784936472773552\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 33: 0.07820077240467072\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 34: 0.07790302485227585\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 35: 0.07746117562055588\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 36: 0.0766073688864708\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 37: 0.07440945506095886\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 38: 0.07304747402667999\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 39: 0.07175710052251816\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 40: 0.07066945731639862\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 41: 0.06960804760456085\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 42: 0.06830629706382751\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 43: 0.06553898006677628\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 44: 0.0644751787185669\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 45: 0.06355087459087372\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 46: 0.06285690516233444\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 47: 0.06218297779560089\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 48: 0.06127837300300598\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 49: 0.059491824358701706\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 50: 0.0587988905608654\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 51: 0.05821891129016876\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 52: 0.05785476043820381\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 53: 0.057464055716991425\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 54: 0.05683556944131851\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 55: 0.055697645992040634\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 56: 0.05525222420692444\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 57: 0.054907411336898804\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 58: 0.05476723983883858\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 59: 0.054551929235458374\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 60: 0.0540977418422699\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 61: 0.05336076393723488\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 62: 0.053060147911310196\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 63: 0.05285470187664032\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 64: 0.0528554767370224\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 65: 0.05273965001106262\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 66: 0.05239949747920036\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 67: 0.051948096603155136\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 68: 0.05178629606962204\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 69: 0.051711197942495346\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 70: 0.05184205621480942\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 71: 0.05181185528635979\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 72: 0.051574427634477615\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 73: 0.05137103423476219\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 74: 0.05131784826517105\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 75: 0.05133717134594917\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 76: 0.05156174674630165\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Ensembling the mixer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Mixer: Neural got accuracy: 0.596060167764729\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Picked best mixer: Neural\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Analyzing the ensemble of mixers\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block ICP is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block AccStats is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Adjustment on validation requested.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Updating the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 1: 0.06780619770288468\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 2: 0.07079224064946174\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 3: 0.07359219714999199\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 4: 0.0705280639231205\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 5: 0.07367646545171738\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# Define predictive task and predictor\n",
    "target = 'concrete_strength'\n",
    "pdef = ProblemDefinition.from_dict({'target': target, 'time_aim': 200})\n",
    "jai = json_ai_from_problem(df, pdef)\n",
    "\n",
    "# We will keep the architecture simple: a single neural mixer, and a `BestOf` ensemble:\n",
    "jai.outputs[target].mixers = [{\n",
    "    \"module\": \"Neural\",\n",
    "    \"args\": {\n",
    "        \"fit_on_dev\": False,\n",
    "        \"stop_after\": \"$problem_definition.seconds_per_mixer\",\n",
    "        \"search_hyperparameters\": False,\n",
    "    }\n",
    "}]\n",
    "\n",
    "jai.outputs[target].ensemble = {\n",
    "    \"module\": \"BestOf\",\n",
    "    \"args\": {\n",
    "        \"args\": \"$pred_args\",\n",
    "        \"accuracy_functions\": \"$accuracy_functions\",\n",
    "    }\n",
    "}\n",
    "\n",
    "# Build and train the predictor\n",
    "predictor = predictor_from_json_ai(jai)\n",
    "predictor.learn(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:05.012032Z",
     "iopub.status.busy": "2021-11-12T04:35:05.010757Z",
     "iopub.status.idle": "2021-11-12T04:35:07.040317Z",
     "shell.execute_reply": "2021-11-12T04:35:07.039575Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-3713:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Featurizing the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block ICP is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block AccStats is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:AccStats.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction</th>\n",
       "      <th>truth</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lower</th>\n",
       "      <th>upper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52.993881</td>\n",
       "      <td>71.30</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>32.340721</td>\n",
       "      <td>73.647042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27.877311</td>\n",
       "      <td>39.60</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>7.224151</td>\n",
       "      <td>48.530472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18.540170</td>\n",
       "      <td>10.79</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>39.193331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.238090</td>\n",
       "      <td>4.83</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.891251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32.959768</td>\n",
       "      <td>47.71</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>12.306607</td>\n",
       "      <td>53.612928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>47.220815</td>\n",
       "      <td>40.93</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>26.567655</td>\n",
       "      <td>67.873976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>42.638142</td>\n",
       "      <td>52.82</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>21.984981</td>\n",
       "      <td>63.291303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>31.631864</td>\n",
       "      <td>39.66</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>10.978704</td>\n",
       "      <td>52.285025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>29.147330</td>\n",
       "      <td>13.29</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>8.494170</td>\n",
       "      <td>49.800491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>38.615118</td>\n",
       "      <td>17.84</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>17.961957</td>\n",
       "      <td>59.268278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>206 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     prediction  truth  confidence      lower      upper\n",
       "0     52.993881  71.30      0.9991  32.340721  73.647042\n",
       "1     27.877311  39.60      0.9991   7.224151  48.530472\n",
       "2     18.540170  10.79      0.9991   0.000000  39.193331\n",
       "3     16.238090   4.83      0.9991   0.000000  36.891251\n",
       "4     32.959768  47.71      0.9991  12.306607  53.612928\n",
       "..          ...    ...         ...        ...        ...\n",
       "201   47.220815  40.93      0.9991  26.567655  67.873976\n",
       "202   42.638142  52.82      0.9991  21.984981  63.291303\n",
       "203   31.631864  39.66      0.9991  10.978704  52.285025\n",
       "204   29.147330  13.29      0.9991   8.494170  49.800491\n",
       "205   38.615118  17.84      0.9991  17.961957  59.268278\n",
       "\n",
       "[206 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train and get predictions for the held out test set\n",
    "predictions = predictor.predict(test_df)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Updating the predictor\n",
    "\n",
    "As previously mentioned, you can update any given mixer with a `BaseMixer.partial_fit()` call. If you have multiple mixers and want to update them all at once, you should use `PredictorInterface.adjust()`. \n",
    "\n",
    "For both of these methods, two encoded datasources are needed as input (for `adjust` you need to wrap them in a dictionary with 'old' and 'new' keys). \n",
    "\n",
    "Let's `adjust` our predictor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:07.046633Z",
     "iopub.status.busy": "2021-11-12T04:35:07.045979Z",
     "iopub.status.idle": "2021-11-12T04:35:14.583826Z",
     "shell.execute_reply": "2021-11-12T04:35:14.584326Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-3713:Updating the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.8/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 1: 0.06395960164566834\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 2: 0.07605174059669177\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 3: 0.06467205968995889\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 4: 0.06867210815350215\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 5: 0.05996004740397135\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 6: 0.05878346413373947\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 7: 0.059159026170770325\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 8: 0.05405611824244261\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 9: 0.05409950918207566\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Loss @ epoch 10: 0.05619461772342523\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from lightwood.data import EncodedDs\n",
    "\n",
    "train_ds = EncodedDs(predictor.encoders, train_df, target)\n",
    "update_ds = EncodedDs(predictor.encoders, update_df, target)\n",
    "\n",
    "predictor.adjust({'old': train_ds, 'new': update_ds})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:14.590370Z",
     "iopub.status.busy": "2021-11-12T04:35:14.589055Z",
     "iopub.status.idle": "2021-11-12T04:35:16.611783Z",
     "shell.execute_reply": "2021-11-12T04:35:16.612298Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-3713:Dropping features: []\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:Featurizing the data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block ICP is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:The block AccStats is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-3713:AccStats.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction</th>\n",
       "      <th>truth</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lower</th>\n",
       "      <th>upper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54.147115</td>\n",
       "      <td>71.30</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>33.493955</td>\n",
       "      <td>74.800276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>29.181819</td>\n",
       "      <td>39.60</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>8.528659</td>\n",
       "      <td>49.834980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.265372</td>\n",
       "      <td>10.79</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.918532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.720444</td>\n",
       "      <td>4.83</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.373604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32.030448</td>\n",
       "      <td>47.71</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>11.377288</td>\n",
       "      <td>52.683609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>42.245369</td>\n",
       "      <td>40.93</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>21.592209</td>\n",
       "      <td>62.898530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>37.356414</td>\n",
       "      <td>52.82</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>16.703253</td>\n",
       "      <td>58.009574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>29.892028</td>\n",
       "      <td>39.66</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>9.238868</td>\n",
       "      <td>50.545189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>28.064985</td>\n",
       "      <td>13.29</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>7.411825</td>\n",
       "      <td>48.718146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>35.456554</td>\n",
       "      <td>17.84</td>\n",
       "      <td>0.9991</td>\n",
       "      <td>14.803393</td>\n",
       "      <td>56.109715</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>206 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     prediction  truth  confidence      lower      upper\n",
       "0     54.147115  71.30      0.9991  33.493955  74.800276\n",
       "1     29.181819  39.60      0.9991   8.528659  49.834980\n",
       "2     16.265372  10.79      0.9991   0.000000  36.918532\n",
       "3     13.720444   4.83      0.9991   0.000000  34.373604\n",
       "4     32.030448  47.71      0.9991  11.377288  52.683609\n",
       "..          ...    ...         ...        ...        ...\n",
       "201   42.245369  40.93      0.9991  21.592209  62.898530\n",
       "202   37.356414  52.82      0.9991  16.703253  58.009574\n",
       "203   29.892028  39.66      0.9991   9.238868  50.545189\n",
       "204   28.064985  13.29      0.9991   7.411825  48.718146\n",
       "205   35.456554  17.84      0.9991  14.803393  56.109715\n",
       "\n",
       "[206 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_predictions = predictor.predict(test_df)\n",
    "new_predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice! Our predictor was updated, and new predictions are looking good. Let's compare the old and new accuracies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-11-12T04:35:16.621618Z",
     "iopub.status.busy": "2021-11-12T04:35:16.620073Z",
     "iopub.status.idle": "2021-11-12T04:35:16.624029Z",
     "shell.execute_reply": "2021-11-12T04:35:16.623466Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Old Accuracy: 0.589\n",
      "New Accuracy: 0.632\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "old_acc = r2_score(predictions['truth'], predictions['prediction'])\n",
    "new_acc = r2_score(new_predictions['truth'], new_predictions['prediction'])\n",
    "\n",
    "print(f'Old Accuracy: {round(old_acc, 3)}\\nNew Accuracy: {round(new_acc, 3)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After updating, we see an increase in the R2 score of predictions for the held out test set.\n",
    "\n",
    "## Conclusion\n",
    "\n",
    "We have gone through a simple example of how Lightwood predictors can leverage newly acquired data to improve their predictions. The interface for doing so is fairly simple, requiring only some new data and a single call to update.\n",
    "\n",
    "You can further customize the logic for updating your mixers by modifying the `partial_fit()` methods in them."
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
  },
  "kernelspec": {
   "display_name": "Python 3.8.10 64-bit",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
